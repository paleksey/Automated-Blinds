
AutomatedWindowShades.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000214  000002a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000214  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800102  00800102  000002aa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002aa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000318  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007bd  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000068c  00000000  00000000  00000b05  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000338  00000000  00000000  00001191  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000008c  00000000  00000000  000014cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003f2  00000000  00000000  00001558  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000cb  00000000  00000000  0000194a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001a15  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	6f c0       	rjmp	.+222    	; 0xf6 <__vector_11>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	e4 e1       	ldi	r30, 0x14	; 20
  48:	f2 e0       	ldi	r31, 0x02	; 2
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	a2 30       	cpi	r26, 0x02	; 2
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	21 e0       	ldi	r18, 0x01	; 1
  58:	a2 e0       	ldi	r26, 0x02	; 2
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	aa 30       	cpi	r26, 0x0A	; 10
  62:	b2 07       	cpc	r27, r18
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	02 d0       	rcall	.+4      	; 0x6c <main>
  68:	d3 c0       	rjmp	.+422    	; 0x210 <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <main>:
int main(void)
{
	
	
	// SET UP TIMER INTERRUPTS (FOR POLLING THE LDR)
	TCCR1B |= (1 << WGM12);                                // Configure timer 1 for CTC mode
  6c:	e1 e8       	ldi	r30, 0x81	; 129
  6e:	f0 e0       	ldi	r31, 0x00	; 0
  70:	80 81       	ld	r24, Z
  72:	88 60       	ori	r24, 0x08	; 8
  74:	80 83       	st	Z, r24
	TIMSK1 |= (1 << OCIE1A);                               // Enable CTC interrupt
  76:	af e6       	ldi	r26, 0x6F	; 111
  78:	b0 e0       	ldi	r27, 0x00	; 0
  7a:	8c 91       	ld	r24, X
  7c:	82 60       	ori	r24, 0x02	; 2
  7e:	8c 93       	st	X, r24
	
	// CONFIGURE THE ADC (FOR READING THE LDR)
	
		//int ADCval;
	ADMUX |= 1 << REFS0;                                   // Set AVcc as the reference voltage for the ADC
  80:	ac e7       	ldi	r26, 0x7C	; 124
  82:	b0 e0       	ldi	r27, 0x00	; 0
  84:	8c 91       	ld	r24, X
  86:	80 64       	ori	r24, 0x40	; 64
  88:	8c 93       	st	X, r24
		ADMUX &= ~(1 << ADLAR);		// Clear for 10 bit resolution
  8a:	8c 91       	ld	r24, X
  8c:	8f 7d       	andi	r24, 0xDF	; 223
  8e:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);  // Enable a prescaler
  90:	aa e7       	ldi	r26, 0x7A	; 122
  92:	b0 e0       	ldi	r27, 0x00	; 0
  94:	8c 91       	ld	r24, X
  96:	87 60       	ori	r24, 0x07	; 7
  98:	8c 93       	st	X, r24
		ADCSRA |= (1 << ADEN);		// Enable the ADC
  9a:	8c 91       	ld	r24, X
  9c:	80 68       	ori	r24, 0x80	; 128
  9e:	8c 93       	st	X, r24
	// ADMUX |= 1 << ADLAR;                                   // 8-bit or 10-bit results
	// ADCSRA = 1 << ADIE                                     // Enable interrupts function in ADC
	//ADCSRA |= (1 << ADEN);                                   // Turn on the ADC feature
	
	// ENABLE GLOBAL INTERRUPTS
	sei(); 
  a0:	78 94       	sei

	// FINISH TIMER INTERRUPTS (FOR LDR POLLING)
	OCR1A = 62500;                                         // Set CTC compare value to 1 KHz at 1 MHz AVR clock, with prescaler of 1024
  a2:	84 e2       	ldi	r24, 0x24	; 36
  a4:	94 ef       	ldi	r25, 0xF4	; 244
  a6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__EEPROM_REGION_LENGTH__+0x7f0089>
  aa:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__EEPROM_REGION_LENGTH__+0x7f0088>
	TCCR1B |= ((1 << CS10) | (1 << CS12));                 // Start timer at F_cpu/1024
  ae:	80 81       	ld	r24, Z
  b0:	85 60       	ori	r24, 0x05	; 5
  b2:	80 83       	st	Z, r24
	
	// set all LEDs as outputs
	DDRD |= (1 << DDD2) | (1 << DDD1) | (1 << DDD0);
  b4:	8a b1       	in	r24, 0x0a	; 10
  b6:	87 60       	ori	r24, 0x07	; 7
  b8:	8a b9       	out	0x0a, r24	; 10
	
	// make LEDs all high to disable them
	PORTD |= (1 << PD2) | (1 << PD1) | (1 << PD0);
  ba:	8b b1       	in	r24, 0x0b	; 11
  bc:	87 60       	ori	r24, 0x07	; 7
  be:	8b b9       	out	0x0b, r24	; 11
	
    /* Replace with your application code */
    while (1) 
    {
    }
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <main+0x54>

000000c2 <turnOnLeds>:
	
}


void turnOnLeds(int color) {
  c2:	9c 01       	movw	r18, r24

	// make LEDs all high to disable them
	PORTD |= (1 << PD2) | (1 << PD1) | (1 << PD0);
  c4:	9b b1       	in	r25, 0x0b	; 11
  c6:	97 60       	ori	r25, 0x07	; 7
  c8:	9b b9       	out	0x0b, r25	; 11
	
	
	// red
	if (color == 0) {
  ca:	21 15       	cp	r18, r1
  cc:	31 05       	cpc	r19, r1
  ce:	11 f4       	brne	.+4      	; 0xd4 <turnOnLeds+0x12>
			PORTD &= ~(1 << PD0); //  turn on PD1 (PD1 is grounded)	
  d0:	58 98       	cbi	0x0b, 0	; 11
  d2:	08 95       	ret
			
	// blue
	} else if (color == 1) {
  d4:	21 30       	cpi	r18, 0x01	; 1
  d6:	31 05       	cpc	r19, r1
  d8:	11 f4       	brne	.+4      	; 0xde <turnOnLeds+0x1c>
		PORTD &= ~(1 << PD1); //  turn on PD1 (PD1 is grounded)	
  da:	59 98       	cbi	0x0b, 1	; 11
  dc:	08 95       	ret
		
	// green
	} else if (color == 2) {
  de:	22 30       	cpi	r18, 0x02	; 2
  e0:	31 05       	cpc	r19, r1
  e2:	11 f4       	brne	.+4      	; 0xe8 <turnOnLeds+0x26>
		PORTD &= ~(1 << PD2); //  turn on PD1 (PD1 is grounded)	
  e4:	5a 98       	cbi	0x0b, 2	; 11
  e6:	08 95       	ret
	// white 
	} else if (color == 3) {
  e8:	23 30       	cpi	r18, 0x03	; 3
  ea:	31 05       	cpc	r19, r1
  ec:	19 f4       	brne	.+6      	; 0xf4 <turnOnLeds+0x32>
		PORTD &= ~(1 << PD2);
  ee:	5a 98       	cbi	0x0b, 2	; 11
		PORTD &= ~(1 << PD1);
  f0:	59 98       	cbi	0x0b, 1	; 11
		PORTD &= ~(1 << PD0);
  f2:	58 98       	cbi	0x0b, 0	; 11
  f4:	08 95       	ret

000000f6 <__vector_11>:
		// do nothing
	}
	
}

ISR(TIMER1_COMPA_vect) {
  f6:	1f 92       	push	r1
  f8:	0f 92       	push	r0
  fa:	0f b6       	in	r0, 0x3f	; 63
  fc:	0f 92       	push	r0
  fe:	11 24       	eor	r1, r1
 100:	2f 93       	push	r18
 102:	3f 93       	push	r19
 104:	4f 93       	push	r20
 106:	5f 93       	push	r21
 108:	6f 93       	push	r22
 10a:	7f 93       	push	r23
 10c:	8f 93       	push	r24
 10e:	9f 93       	push	r25
 110:	af 93       	push	r26
 112:	bf 93       	push	r27
 114:	ef 93       	push	r30
 116:	ff 93       	push	r31
	
	// Keeps track of four seconds passing
	ElapsedFourSeconds++;
 118:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 11c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 120:	01 96       	adiw	r24, 0x01	; 1
	//DDRD |= (1 << DDD0) ; // sets bit DDD0 to 1 within register DDRD (PD0 is now an output)
	//PORTD &= ~(1 << PORTD0); //  turn off PD0 (PD0 is grounded)
	//PORTD = PORTD ^ 0x01;	// Toggle the RGB
	
	// check if 2 minutes (120 seconds) have elapsed
	if (ElapsedFourSeconds == 1) {
 122:	81 30       	cpi	r24, 0x01	; 1
 124:	91 05       	cpc	r25, r1
 126:	29 f0       	breq	.+10     	; 0x132 <__vector_11+0x3c>
}

ISR(TIMER1_COMPA_vect) {
	
	// Keeps track of four seconds passing
	ElapsedFourSeconds++;
 128:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 12c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 130:	5e c0       	rjmp	.+188    	; 0x1ee <__vector_11+0xf8>
	//PORTD = PORTD ^ 0x01;	// Toggle the RGB
	
	// check if 2 minutes (120 seconds) have elapsed
	if (ElapsedFourSeconds == 1) {
		
		ElapsedFourSeconds = 0;  // Reset counter variable
 132:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__data_end+0x1>
 136:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
		
		// Take a reading of the LDR sensor
		ADCSRA |= 1 << ADSC; // start the first conversion
 13a:	ea e7       	ldi	r30, 0x7A	; 122
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	80 81       	ld	r24, Z
 140:	80 64       	ori	r24, 0x40	; 64
 142:	80 83       	st	Z, r24

		//// we are synchronously waiting for the conversion to complete
		while(ADCSRA & (1<<ADIF));
 144:	80 81       	ld	r24, Z
 146:	84 fd       	sbrc	r24, 4
 148:	fd cf       	rjmp	.-6      	; 0x144 <__vector_11+0x4e>
		//
		// compare ADC to set value
		if (ADC >= 523) {
 14a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__EEPROM_REGION_LENGTH__+0x7f0078>
 14e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__EEPROM_REGION_LENGTH__+0x7f0079>
 152:	8b 30       	cpi	r24, 0x0B	; 11
 154:	92 40       	sbci	r25, 0x02	; 2
 156:	18 f0       	brcs	.+6      	; 0x15e <__vector_11+0x68>
			light_now = yes;
 158:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <light_now>
 15c:	03 c0       	rjmp	.+6      	; 0x164 <__vector_11+0x6e>
		} else {
			light_now = no;
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <light_now>
		}

		// figure out number of hits
		if (light_before == light_now) {
 164:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <light_now>
 168:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
 16c:	98 13       	cpse	r25, r24
 16e:	0e c0       	rjmp	.+28     	; 0x18c <__vector_11+0x96>
			if (hits < 2) {
 170:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <hits>
 174:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <hits+0x1>
 178:	22 30       	cpi	r18, 0x02	; 2
 17a:	31 05       	cpc	r19, r1
 17c:	58 f4       	brcc	.+22     	; 0x194 <__vector_11+0x9e>
				hits++;
 17e:	2f 5f       	subi	r18, 0xFF	; 255
 180:	3f 4f       	sbci	r19, 0xFF	; 255
 182:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <hits+0x1>
 186:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <hits>
 18a:	04 c0       	rjmp	.+8      	; 0x194 <__vector_11+0x9e>
			}
		} else {
			
			hits = 0;
 18c:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <hits+0x1>
 190:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <hits>
		}
		light_before = light_now;
 194:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		
					
					
		
		// determine state machine output (what should the blinds do next)
		if (current_state == dark AND light_now == yes AND hits == 2) {
 198:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <current_state>
 19c:	91 30       	cpi	r25, 0x01	; 1
 19e:	71 f4       	brne	.+28     	; 0x1bc <__vector_11+0xc6>
 1a0:	81 11       	cpse	r24, r1
 1a2:	1d c0       	rjmp	.+58     	; 0x1de <__vector_11+0xe8>
 1a4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <hits>
 1a8:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <hits+0x1>
 1ac:	02 97       	sbiw	r24, 0x02	; 2
 1ae:	b9 f4       	brne	.+46     	; 0x1de <__vector_11+0xe8>
			current_state = light;
 1b0:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <current_state>
			turnOnLeds(2);
 1b4:	82 e0       	ldi	r24, 0x02	; 2
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	84 df       	rcall	.-248    	; 0xc2 <turnOnLeds>
 1ba:	14 c0       	rjmp	.+40     	; 0x1e4 <__vector_11+0xee>
			// aleskeyfunction(2);
		} else if (current_state == light AND light_now == no AND hits == 2) {
 1bc:	91 11       	cpse	r25, r1
 1be:	0f c0       	rjmp	.+30     	; 0x1de <__vector_11+0xe8>
 1c0:	81 30       	cpi	r24, 0x01	; 1
 1c2:	69 f4       	brne	.+26     	; 0x1de <__vector_11+0xe8>
 1c4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <hits>
 1c8:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <hits+0x1>
 1cc:	02 97       	sbiw	r24, 0x02	; 2
 1ce:	39 f4       	brne	.+14     	; 0x1de <__vector_11+0xe8>
			current_state = dark;
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <current_state>
			turnOnLeds(1);
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	73 df       	rcall	.-282    	; 0xc2 <turnOnLeds>
 1dc:	03 c0       	rjmp	.+6      	; 0x1e4 <__vector_11+0xee>
			// aleskesyfunction(0);
		} else {
			turnOnLeds(3);
 1de:	83 e0       	ldi	r24, 0x03	; 3
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	6f df       	rcall	.-290    	; 0xc2 <turnOnLeds>
			current_state = current_state;
		}
		
		// Clear ADIF by writing one to it
		// Clearing ADC bit
		ADCSRA|=(1<<ADIF);		
 1e4:	ea e7       	ldi	r30, 0x7A	; 122
 1e6:	f0 e0       	ldi	r31, 0x00	; 0
 1e8:	80 81       	ld	r24, Z
 1ea:	80 61       	ori	r24, 0x10	; 16
 1ec:	80 83       	st	Z, r24
		
	}
	
}
 1ee:	ff 91       	pop	r31
 1f0:	ef 91       	pop	r30
 1f2:	bf 91       	pop	r27
 1f4:	af 91       	pop	r26
 1f6:	9f 91       	pop	r25
 1f8:	8f 91       	pop	r24
 1fa:	7f 91       	pop	r23
 1fc:	6f 91       	pop	r22
 1fe:	5f 91       	pop	r21
 200:	4f 91       	pop	r20
 202:	3f 91       	pop	r19
 204:	2f 91       	pop	r18
 206:	0f 90       	pop	r0
 208:	0f be       	out	0x3f, r0	; 63
 20a:	0f 90       	pop	r0
 20c:	1f 90       	pop	r1
 20e:	18 95       	reti

00000210 <_exit>:
 210:	f8 94       	cli

00000212 <__stop_program>:
 212:	ff cf       	rjmp	.-2      	; 0x212 <__stop_program>
