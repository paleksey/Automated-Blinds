
AutomatedWindowShades.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000070a  0000079e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000070a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  00800102  00800102  000007a0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007a0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000007d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  0000080c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c25  00000000  00000000  0000084c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000071d  00000000  00000000  00001471  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000609  00000000  00000000  00001b8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000fc  00000000  00000000  00002198  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004b8  00000000  00000000  00002294  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000036c  00000000  00000000  0000274c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00002ab8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	ff c0       	rjmp	.+510    	; 0x208 <__vector_4>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	e4 c2       	rjmp	.+1480   	; 0x5e0 <__vector_11>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	ea e0       	ldi	r30, 0x0A	; 10
  48:	f7 e0       	ldi	r31, 0x07	; 7
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	a2 30       	cpi	r26, 0x02	; 2
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	21 e0       	ldi	r18, 0x01	; 1
  58:	a2 e0       	ldi	r26, 0x02	; 2
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	a6 31       	cpi	r26, 0x16	; 22
  62:	b2 07       	cpc	r27, r18
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	8f d0       	rcall	.+286    	; 0x186 <main>
  68:	4e c3       	rjmp	.+1692   	; 0x706 <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <servo>:
		int CALIBRATE_TIMER =  (PERIOD / (20 + 1.5) * 20);
		int UP_TIMER =  (PERIOD / (20 + 1.7) * 20);
		int DOWN_TIMER =  (PERIOD / (20 + 1.3) * 20);
		

	    if(action == callibrate)
  6c:	83 30       	cpi	r24, 0x03	; 3
  6e:	a1 f4       	brne	.+40     	; 0x98 <servo+0x2c>
	    {
	        DDRB  |= (1 << DDB1); // set output to PB1
  70:	21 9a       	sbi	0x04, 1	; 4
			  TCCR1A = ((1 << COM1A0) | (1 << COM1A1) | (1 << WGM11)); // Inverting + WGM mode 14 
  72:	92 ec       	ldi	r25, 0xC2	; 194
  74:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__EEPROM_REGION_LENGTH__+0x7f0080>
			  TCCR1B = ((1 << WGM12) | (1 << WGM13) | (1 << CS11)); // WGM mode 14 (Fast PWM), and 8x prescaler
  78:	9a e1       	ldi	r25, 0x1A	; 26
  7a:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__EEPROM_REGION_LENGTH__+0x7f0081>
			  //(16000000 / 8 / 40000 = 50hz)
			  ICR1  = PERIOD;  //set ICR1 to produce 50Hz frequency
  7e:	2f ef       	ldi	r18, 0xFF	; 255
  80:	3f e7       	ldi	r19, 0x7F	; 127
  82:	30 93 87 00 	sts	0x0087, r19	; 0x800087 <__EEPROM_REGION_LENGTH__+0x7f0087>
  86:	20 93 86 00 	sts	0x0086, r18	; 0x800086 <__EEPROM_REGION_LENGTH__+0x7f0086>
			  OCR1A = CALIBRATE_TIMER;   // 42552 * 0.925 most left
  8a:	20 e1       	ldi	r18, 0x10	; 16
  8c:	37 e7       	ldi	r19, 0x77	; 119
  8e:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__EEPROM_REGION_LENGTH__+0x7f0089>
  92:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__EEPROM_REGION_LENGTH__+0x7f0088>
  96:	2c c0       	rjmp	.+88     	; 0xf0 <servo+0x84>
	    }
		    
	    if(action == down)
  98:	82 30       	cpi	r24, 0x02	; 2
  9a:	a1 f4       	brne	.+40     	; 0xc4 <servo+0x58>
	    {
	       DDRB  |= (1 << DDB1); // set output to PB1
  9c:	21 9a       	sbi	0x04, 1	; 4

			  TCCR1A = ((1 << COM1A0) | (1 << COM1A1) | (1 << WGM11)); // Inverting + WGM mode 14 
  9e:	82 ec       	ldi	r24, 0xC2	; 194
  a0:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__EEPROM_REGION_LENGTH__+0x7f0080>
			  TCCR1B = ((1 << WGM12) | (1 << WGM13) | (1 << CS11)); // WGM mode 14 (Fast PWM), and 8x prescaler
  a4:	8a e1       	ldi	r24, 0x1A	; 26
  a6:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__EEPROM_REGION_LENGTH__+0x7f0081>
			  //(16000000 / 8 / 40000 = 50hz)
			  ICR1  = PERIOD;  //set ICR1 to produce 50Hz frequency
  aa:	8f ef       	ldi	r24, 0xFF	; 255
  ac:	9f e7       	ldi	r25, 0x7F	; 127
  ae:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__EEPROM_REGION_LENGTH__+0x7f0087>
  b2:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__EEPROM_REGION_LENGTH__+0x7f0086>
			  OCR1A = DOWN_TIMER;   // 42552 * 0.925 most left
  b6:	8f e2       	ldi	r24, 0x2F	; 47
  b8:	98 e7       	ldi	r25, 0x78	; 120
  ba:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__EEPROM_REGION_LENGTH__+0x7f0089>
  be:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__EEPROM_REGION_LENGTH__+0x7f0088>
  c2:	08 95       	ret
	    }
	    
	    if(action == up)
  c4:	81 30       	cpi	r24, 0x01	; 1
  c6:	a1 f4       	brne	.+40     	; 0xf0 <servo+0x84>
	    {
	      DDRB  |= (1 << DDB1); // set output to PB1
  c8:	21 9a       	sbi	0x04, 1	; 4
			  TCCR1A = ((1 << COM1A0) | (1 << COM1A1) | (1 << WGM11)); // Inverting + WGM mode 14 
  ca:	82 ec       	ldi	r24, 0xC2	; 194
  cc:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__EEPROM_REGION_LENGTH__+0x7f0080>
			  TCCR1B = ((1 << WGM12) | (1 << WGM13) | (1 << CS11)); // WGM mode 14 (Fast PWM), and 8x prescaler
  d0:	8a e1       	ldi	r24, 0x1A	; 26
  d2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__EEPROM_REGION_LENGTH__+0x7f0081>
			  //(16000000 / 8 / 40000 = 50hz)
			  ICR1  = PERIOD;  //set ICR1 to produce 50Hz frequency
  d6:	8f ef       	ldi	r24, 0xFF	; 255
  d8:	9f e7       	ldi	r25, 0x7F	; 127
  da:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__EEPROM_REGION_LENGTH__+0x7f0087>
  de:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__EEPROM_REGION_LENGTH__+0x7f0086>
			  OCR1A = UP_TIMER;   // 42552 * 0.935 most left
  e2:	88 ef       	ldi	r24, 0xF8	; 248
  e4:	95 e7       	ldi	r25, 0x75	; 117
  e6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__EEPROM_REGION_LENGTH__+0x7f0089>
  ea:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__EEPROM_REGION_LENGTH__+0x7f0088>
  ee:	08 95       	ret
	    }

		if(action == stop)
  f0:	81 11       	cpse	r24, r1
  f2:	05 c0       	rjmp	.+10     	; 0xfe <servo+0x92>
		{
			DDRB &= ~(1 << DDB1);
  f4:	21 98       	cbi	0x04, 1	; 4
			TCCR1A &= (0<<COM1A1) & (0<<COM1A1);
  f6:	e0 e8       	ldi	r30, 0x80	; 128
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 81       	ld	r24, Z
  fc:	10 82       	st	Z, r1
  fe:	08 95       	ret

00000100 <turnOnLeds>:


void turnOnLeds(int color, int toggle) {

	// red
	if (color == 0) {
 100:	00 97       	sbiw	r24, 0x00	; 0
 102:	61 f4       	brne	.+24     	; 0x11c <turnOnLeds+0x1c>
		if (toggle) {
 104:	67 2b       	or	r22, r23
 106:	29 f0       	breq	.+10     	; 0x112 <turnOnLeds+0x12>
			PORTD = PORTD ^ 0x01;	// Toggle the RGB	
 108:	9b b1       	in	r25, 0x0b	; 11
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	89 27       	eor	r24, r25
 10e:	8b b9       	out	0x0b, r24	; 11
 110:	08 95       	ret
			//PIND = _BV(PD0);
		}
		else {
			// make LEDs all high to disable them
			PORTD |= (1 << PD2) | (1 << PD1) | (1 << PD0);
 112:	8b b1       	in	r24, 0x0b	; 11
 114:	87 60       	ori	r24, 0x07	; 7
 116:	8b b9       	out	0x0b, r24	; 11
			
			PORTD &= ~(1 << PD0); //  turn on PD1 (PD1 is grounded)	
 118:	58 98       	cbi	0x0b, 0	; 11
 11a:	08 95       	ret
		}
	// blue
	} else if (color == 1) {
 11c:	81 30       	cpi	r24, 0x01	; 1
 11e:	91 05       	cpc	r25, r1
 120:	61 f4       	brne	.+24     	; 0x13a <turnOnLeds+0x3a>
		if (toggle) {
 122:	67 2b       	or	r22, r23
 124:	29 f0       	breq	.+10     	; 0x130 <turnOnLeds+0x30>
			PORTD = PORTD ^ 0x02;	// Toggle the RGB
 126:	9b b1       	in	r25, 0x0b	; 11
 128:	82 e0       	ldi	r24, 0x02	; 2
 12a:	89 27       	eor	r24, r25
 12c:	8b b9       	out	0x0b, r24	; 11
 12e:	08 95       	ret
		}
		else {
			// make LEDs all high to disable them
			PORTD |= (1 << PD2) | (1 << PD1) | (1 << PD0);
 130:	8b b1       	in	r24, 0x0b	; 11
 132:	87 60       	ori	r24, 0x07	; 7
 134:	8b b9       	out	0x0b, r24	; 11
			
			PORTD &= ~(1 << PD1); //  turn on PD1 (PD1 is grounded)	
 136:	59 98       	cbi	0x0b, 1	; 11
 138:	08 95       	ret
		}
	// green
	} else if (color == 2) {
 13a:	82 30       	cpi	r24, 0x02	; 2
 13c:	91 05       	cpc	r25, r1
 13e:	61 f4       	brne	.+24     	; 0x158 <turnOnLeds+0x58>
		if (toggle) {
 140:	67 2b       	or	r22, r23
 142:	29 f0       	breq	.+10     	; 0x14e <turnOnLeds+0x4e>
			PORTD = PORTD ^ 0x04;	// Toggle the RGB	
 144:	9b b1       	in	r25, 0x0b	; 11
 146:	84 e0       	ldi	r24, 0x04	; 4
 148:	89 27       	eor	r24, r25
 14a:	8b b9       	out	0x0b, r24	; 11
 14c:	08 95       	ret
		}
		else {
			// make LEDs all high to disable them
			PORTD |= (1 << PD2) | (1 << PD1) | (1 << PD0);
 14e:	8b b1       	in	r24, 0x0b	; 11
 150:	87 60       	ori	r24, 0x07	; 7
 152:	8b b9       	out	0x0b, r24	; 11
			
			PORTD &= ~(1 << PD2); //  turn on PD1 (PD1 is grounded)	
 154:	5a 98       	cbi	0x0b, 2	; 11
 156:	08 95       	ret
		}
	// white 
	} else if (color == 3) {
 158:	83 30       	cpi	r24, 0x03	; 3
 15a:	91 05       	cpc	r25, r1
 15c:	71 f4       	brne	.+28     	; 0x17a <turnOnLeds+0x7a>
		if (toggle) {
 15e:	67 2b       	or	r22, r23
 160:	29 f0       	breq	.+10     	; 0x16c <turnOnLeds+0x6c>
			PORTD = PORTD ^ 0x07;	// Toggle the RGB
 162:	9b b1       	in	r25, 0x0b	; 11
 164:	87 e0       	ldi	r24, 0x07	; 7
 166:	89 27       	eor	r24, r25
 168:	8b b9       	out	0x0b, r24	; 11
 16a:	08 95       	ret
		}
		else {
			// make LEDs all high to disable them
			PORTD |= (1 << PD2) | (1 << PD1) | (1 << PD0);
 16c:	8b b1       	in	r24, 0x0b	; 11
 16e:	87 60       	ori	r24, 0x07	; 7
 170:	8b b9       	out	0x0b, r24	; 11
			
			PORTD &= ~(1 << PD2);
 172:	5a 98       	cbi	0x0b, 2	; 11
			PORTD &= ~(1 << PD1);
 174:	59 98       	cbi	0x0b, 1	; 11
			PORTD &= ~(1 << PD0);
 176:	58 98       	cbi	0x0b, 0	; 11
 178:	08 95       	ret
		}
	} else if (color == -1) {
 17a:	01 96       	adiw	r24, 0x01	; 1
 17c:	19 f4       	brne	.+6      	; 0x184 <turnOnLeds+0x84>
		// turn off LEDs
		PORTD |= (1 << PD2) | (1 << PD1) | (1 << PD0);
 17e:	8b b1       	in	r24, 0x0b	; 11
 180:	87 60       	ori	r24, 0x07	; 7
 182:	8b b9       	out	0x0b, r24	; 11
 184:	08 95       	ret

00000186 <main>:
int main(void)
{
	
	
	// SET UP TIMER INTERRUPTS (FOR POLLING THE LDR)
	TCCR1B |= (1 << WGM12);                                // Configure timer 1 for CTC mode
 186:	e1 e8       	ldi	r30, 0x81	; 129
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	80 81       	ld	r24, Z
 18c:	88 60       	ori	r24, 0x08	; 8
 18e:	80 83       	st	Z, r24
	TIMSK1 |= (1 << OCIE1A);                               // Enable CTC interrupt
 190:	ef e6       	ldi	r30, 0x6F	; 111
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	80 81       	ld	r24, Z
 196:	82 60       	ori	r24, 0x02	; 2
 198:	80 83       	st	Z, r24
	

	// CONFIGURE THE ADC (FOR READING THE LDR)
		//int ADCval;
	ADMUX |= 1 << REFS0;                                   // Set AVcc as the reference voltage for the ADC
 19a:	ec e7       	ldi	r30, 0x7C	; 124
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	80 81       	ld	r24, Z
 1a0:	80 64       	ori	r24, 0x40	; 64
 1a2:	80 83       	st	Z, r24
		ADMUX &= ~(1 << ADLAR);		// Clear for 10 bit resolution
 1a4:	80 81       	ld	r24, Z
 1a6:	8f 7d       	andi	r24, 0xDF	; 223
 1a8:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);  // Enable a prescaler
 1aa:	ea e7       	ldi	r30, 0x7A	; 122
 1ac:	f0 e0       	ldi	r31, 0x00	; 0
 1ae:	80 81       	ld	r24, Z
 1b0:	87 60       	ori	r24, 0x07	; 7
 1b2:	80 83       	st	Z, r24
		ADCSRA |= (1 << ADEN);		// Enable the ADC
 1b4:	80 81       	ld	r24, Z
 1b6:	80 68       	ori	r24, 0x80	; 128
 1b8:	80 83       	st	Z, r24
	// ADCSRA = 1 << ADIE                                     // Enable interrupts function in ADC
	//ADCSRA |= (1 << ADEN);                                   // Turn on the ADC feature
	

	// CONFIGURE THE BUTTONS
	DDRC &= ~(1 << PC1) | ~(1 << PC2) | ~(1 << PC3)| ~(1 << PC6) | ~(1 << PC5) | ~(1 << PC4);  // make the up button an input (clear bit)
 1ba:	87 b1       	in	r24, 0x07	; 7
 1bc:	87 b9       	out	0x07, r24	; 7
	PORTC |= (1 << PC1) | (1 << PC2) | (1 << PC3) | (1 << PC6) | (1 << PC5);  // make the up button tied high (set bit)
 1be:	88 b1       	in	r24, 0x08	; 8
 1c0:	8e 66       	ori	r24, 0x6E	; 110
 1c2:	88 b9       	out	0x08, r24	; 8

	// CONFIGURE MODE SWITCH
	portbhistory = PINC;
 1c4:	86 b1       	in	r24, 0x06	; 6
 1c6:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <portbhistory>


	// CONFIGURE THE INTERRUPTS FOR THE BUTTONS
	PCICR |= (1 << PCIE1);                               // Turn on pin interrupts for PD pins
 1ca:	e8 e6       	ldi	r30, 0x68	; 104
 1cc:	f0 e0       	ldi	r31, 0x00	; 0
 1ce:	80 81       	ld	r24, Z
 1d0:	82 60       	ori	r24, 0x02	; 2
 1d2:	80 83       	st	Z, r24
	//PCMSK1 |= (1 << PCINT9) | (1 << PCINT11);              // Mask Interrupts for only the pins you need
	PCMSK1 |= (1 << PCINT9) | (1 << PCINT11) | (1 << PCINT10) | (1 << PCINT13) | (1 << PCINT12); 
 1d4:	ec e6       	ldi	r30, 0x6C	; 108
 1d6:	f0 e0       	ldi	r31, 0x00	; 0
 1d8:	80 81       	ld	r24, Z
 1da:	8e 63       	ori	r24, 0x3E	; 62
 1dc:	80 83       	st	Z, r24

	// ENABLE GLOBAL INTERRUPTS
	sei(); 
 1de:	78 94       	sei


	// FINISH TIMER INTERRUPTS (FOR LDR POLLING)
	OCR1A = 62500;                                         // Set CTC compare value to 1 KHz at 1 MHz AVR clock, with prescaler of 1024
 1e0:	84 e2       	ldi	r24, 0x24	; 36
 1e2:	94 ef       	ldi	r25, 0xF4	; 244
 1e4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__EEPROM_REGION_LENGTH__+0x7f0089>
 1e8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__EEPROM_REGION_LENGTH__+0x7f0088>
	//TCCR1B |= ((1 << CS10) | (1 << CS12));                 // Start timer at F_cpu/1024

	
	// set all LEDs as outputs
	DDRD |= (1 << DDD2) | (1 << DDD1) | (1 << DDD0);
 1ec:	8a b1       	in	r24, 0x0a	; 10
 1ee:	87 60       	ori	r24, 0x07	; 7
 1f0:	8a b9       	out	0x0a, r24	; 10
	
	// make LEDs all high to disable them
	PORTD |= (1 << PD2) | (1 << PD1) | (1 << PD0);
 1f2:	8b b1       	in	r24, 0x0b	; 11
 1f4:	87 60       	ori	r24, 0x07	; 7
 1f6:	8b b9       	out	0x0b, r24	; 11
	
	// servo(up);
	turnOnLeds(1, 0);
 1f8:	60 e0       	ldi	r22, 0x00	; 0
 1fa:	70 e0       	ldi	r23, 0x00	; 0
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	7f df       	rcall	.-258    	; 0x100 <turnOnLeds>
	
	servo(callibrate);
 202:	83 e0       	ldi	r24, 0x03	; 3
 204:	33 df       	rcall	.-410    	; 0x6c <servo>
    /* Replace with your application code */
    while (1) 
    {
		//PORTD = PORTD ^ 0x04;	// Toggle the RGB
		//_delay_ms(500);
    }
 206:	ff cf       	rjmp	.-2      	; 0x206 <main+0x80>

00000208 <__vector_4>:
			    
	}
	


ISR(PCINT1_vect) {
 208:	1f 92       	push	r1
 20a:	0f 92       	push	r0
 20c:	0f b6       	in	r0, 0x3f	; 63
 20e:	0f 92       	push	r0
 210:	11 24       	eor	r1, r1
 212:	0f 93       	push	r16
 214:	1f 93       	push	r17
 216:	2f 93       	push	r18
 218:	3f 93       	push	r19
 21a:	4f 93       	push	r20
 21c:	5f 93       	push	r21
 21e:	6f 93       	push	r22
 220:	7f 93       	push	r23
 222:	8f 93       	push	r24
 224:	9f 93       	push	r25
 226:	af 93       	push	r26
 228:	bf 93       	push	r27
 22a:	ef 93       	push	r30
 22c:	ff 93       	push	r31
	// PCICR |= (1 << PCIE1);                               // Turn on pin interrupts for PD pins
	
	changedbits = PINC ^ portbhistory;
 22e:	86 b1       	in	r24, 0x06	; 6
 230:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <portbhistory>
 234:	89 27       	eor	r24, r25
 236:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <changedbits>
	portbhistory = PINC;	
 23a:	86 b1       	in	r24, 0x06	; 6
 23c:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <portbhistory>

	// PCICR &= ~(1 << PCIE1); 
	PCMSK1 &= ~(1 << PCINT13);
 240:	ec e6       	ldi	r30, 0x6C	; 108
 242:	f0 e0       	ldi	r31, 0x00	; 0
 244:	80 81       	ld	r24, Z
 246:	8f 7d       	andi	r24, 0xDF	; 223
 248:	80 83       	st	Z, r24

	
	// check if programming button is pressed
	if (~PINC & (1 << PC3)) {
 24a:	33 99       	sbic	0x06, 3	; 6
 24c:	48 c0       	rjmp	.+144    	; 0x2de <__vector_4+0xd6>
		
		// disable interrupts
		cli();
 24e:	f8 94       	cli
		
		// reset the height, we are assuming shades are at the top
		current_height = 0;
 250:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
 254:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__data_end+0x1>
 258:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end+0x2>
 25c:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <__data_end+0x3>
		
		// force the servo to move down
		servo(down);
 260:	82 e0       	ldi	r24, 0x02	; 2
 262:	04 df       	rcall	.-504    	; 0x6c <servo>
		
		turnOnLeds(2, 0);
 264:	60 e0       	ldi	r22, 0x00	; 0
 266:	70 e0       	ldi	r23, 0x00	; 0
 268:	82 e0       	ldi	r24, 0x02	; 2
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	49 df       	rcall	.-366    	; 0x100 <turnOnLeds>
		
		// start keeping track of servo position
		while ((~PINC & (1 << PC3)) && current_height >= 0) {
 26e:	33 99       	sbic	0x06, 3	; 6
 270:	1d c0       	rjmp	.+58     	; 0x2ac <__vector_4+0xa4>
 272:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 276:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 27a:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <__data_end+0x2>
 27e:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <__data_end+0x3>
			current_height = current_height + 1;
 282:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 286:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 28a:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <__data_end+0x2>
 28e:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <__data_end+0x3>
 292:	01 96       	adiw	r24, 0x01	; 1
 294:	a1 1d       	adc	r26, r1
 296:	b1 1d       	adc	r27, r1
 298:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 29c:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 2a0:	a0 93 04 01 	sts	0x0104, r26	; 0x800104 <__data_end+0x2>
 2a4:	b0 93 05 01 	sts	0x0105, r27	; 0x800105 <__data_end+0x3>
		servo(down);
		
		turnOnLeds(2, 0);
		
		// start keeping track of servo position
		while ((~PINC & (1 << PC3)) && current_height >= 0) {
 2a8:	33 9b       	sbis	0x06, 3	; 6
 2aa:	e3 cf       	rjmp	.-58     	; 0x272 <__vector_4+0x6a>
			current_height = current_height + 1;
		}
		
		// stop the servo
		servo(stop);
 2ac:	80 e0       	ldi	r24, 0x00	; 0
 2ae:	de de       	rcall	.-580    	; 0x6c <servo>
		
		// update the max height so now we know where bottom is
		max_height = current_height;
 2b0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 2b4:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 2b8:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <__data_end+0x2>
 2bc:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <__data_end+0x3>
 2c0:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <max_height>
 2c4:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <max_height+0x1>
 2c8:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <max_height+0x2>
 2cc:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <max_height+0x3>
		
		turnOnLeds(-1, 0);
 2d0:	60 e0       	ldi	r22, 0x00	; 0
 2d2:	70 e0       	ldi	r23, 0x00	; 0
 2d4:	8f ef       	ldi	r24, 0xFF	; 255
 2d6:	9f ef       	ldi	r25, 0xFF	; 255
 2d8:	13 df       	rcall	.-474    	; 0x100 <turnOnLeds>
		
		// turn the interrupts back on
		sei();
 2da:	78 94       	sei
 2dc:	69 c1       	rjmp	.+722    	; 0x5b0 <__stack+0xb1>
		
	// check if up button is pressed
	} else if (~PINC & (1 << PC1)) {
 2de:	31 99       	sbic	0x06, 1	; 6
 2e0:	28 c0       	rjmp	.+80     	; 0x332 <__vector_4+0x12a>
		
		// disable interrupts
		cli();
 2e2:	f8 94       	cli
		
		// check position of blinds
		//if (current_height > 0) {
			
			// start moving the window shades up
			servo(up);
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	c2 de       	rcall	.-636    	; 0x6c <servo>
			
			turnOnLeds(3, 0);
 2e8:	60 e0       	ldi	r22, 0x00	; 0
 2ea:	70 e0       	ldi	r23, 0x00	; 0
 2ec:	83 e0       	ldi	r24, 0x03	; 3
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	07 df       	rcall	.-498    	; 0x100 <turnOnLeds>
			
			while ((~PINC & (1 << PC1))) {
 2f2:	31 99       	sbic	0x06, 1	; 6
 2f4:	15 c0       	rjmp	.+42     	; 0x320 <__vector_4+0x118>
			//while ((~PINC & (1 << PC1)) && current_height > 0) {
				current_height = current_height - 1;
 2f6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 2fa:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 2fe:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <__data_end+0x2>
 302:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <__data_end+0x3>
 306:	01 97       	sbiw	r24, 0x01	; 1
 308:	a1 09       	sbc	r26, r1
 30a:	b1 09       	sbc	r27, r1
 30c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 310:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 314:	a0 93 04 01 	sts	0x0104, r26	; 0x800104 <__data_end+0x2>
 318:	b0 93 05 01 	sts	0x0105, r27	; 0x800105 <__data_end+0x3>
			// start moving the window shades up
			servo(up);
			
			turnOnLeds(3, 0);
			
			while ((~PINC & (1 << PC1))) {
 31c:	31 9b       	sbis	0x06, 1	; 6
 31e:	eb cf       	rjmp	.-42     	; 0x2f6 <__vector_4+0xee>
			//while ((~PINC & (1 << PC1)) && current_height > 0) {
				current_height = current_height - 1;
			} 
			
			// stop moving the window shades
			servo(stop);
 320:	80 e0       	ldi	r24, 0x00	; 0
 322:	a4 de       	rcall	.-696    	; 0x6c <servo>
			
			turnOnLeds(-1, 0);
 324:	60 e0       	ldi	r22, 0x00	; 0
 326:	70 e0       	ldi	r23, 0x00	; 0
 328:	8f ef       	ldi	r24, 0xFF	; 255
 32a:	9f ef       	ldi	r25, 0xFF	; 255
 32c:	e9 de       	rcall	.-558    	; 0x100 <turnOnLeds>
			
		//}
		
		// enable global interrupts
		sei();
 32e:	78 94       	sei
 330:	3f c1       	rjmp	.+638    	; 0x5b0 <__stack+0xb1>
	
	
	// down button
	} else if (~PINC & (1 << PC2)) {
 332:	32 99       	sbic	0x06, 2	; 6
 334:	28 c0       	rjmp	.+80     	; 0x386 <__vector_4+0x17e>
		
		// disable interrupts
		cli();
 336:	f8 94       	cli
		
		// check position of blinds
		//if (current_height < max_height) {
			
			// start moving the window shades down
			servo(down);
 338:	82 e0       	ldi	r24, 0x02	; 2
 33a:	98 de       	rcall	.-720    	; 0x6c <servo>
			
			turnOnLeds(1, 0);
 33c:	60 e0       	ldi	r22, 0x00	; 0
 33e:	70 e0       	ldi	r23, 0x00	; 0
 340:	81 e0       	ldi	r24, 0x01	; 1
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	dd de       	rcall	.-582    	; 0x100 <turnOnLeds>
			
			while ((~PINC & (1 << PC2))) {
 346:	32 99       	sbic	0x06, 2	; 6
 348:	15 c0       	rjmp	.+42     	; 0x374 <__vector_4+0x16c>
			 //while ((~PINC & (1 << PC2)) && current_height < max_height) {
				
				current_height = current_height + 1;
 34a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 34e:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 352:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <__data_end+0x2>
 356:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <__data_end+0x3>
 35a:	01 96       	adiw	r24, 0x01	; 1
 35c:	a1 1d       	adc	r26, r1
 35e:	b1 1d       	adc	r27, r1
 360:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 364:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 368:	a0 93 04 01 	sts	0x0104, r26	; 0x800104 <__data_end+0x2>
 36c:	b0 93 05 01 	sts	0x0105, r27	; 0x800105 <__data_end+0x3>
			// start moving the window shades down
			servo(down);
			
			turnOnLeds(1, 0);
			
			while ((~PINC & (1 << PC2))) {
 370:	32 9b       	sbis	0x06, 2	; 6
 372:	eb cf       	rjmp	.-42     	; 0x34a <__vector_4+0x142>
				
				current_height = current_height + 1;
			} 
			
			// stop moving the window shades
			servo(stop);
 374:	80 e0       	ldi	r24, 0x00	; 0
 376:	7a de       	rcall	.-780    	; 0x6c <servo>
			
		//}
		
		// enable interrupts
		sei();
 378:	78 94       	sei
		
		turnOnLeds(-1, 0);
 37a:	60 e0       	ldi	r22, 0x00	; 0
 37c:	70 e0       	ldi	r23, 0x00	; 0
 37e:	8f ef       	ldi	r24, 0xFF	; 255
 380:	9f ef       	ldi	r25, 0xFF	; 255
 382:	be de       	rcall	.-644    	; 0x100 <turnOnLeds>
 384:	15 c1       	rjmp	.+554    	; 0x5b0 <__stack+0xb1>
	
	// mode selection switch
	} else if (changedbits & (1 << PC4)) {
 386:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <changedbits>
 38a:	84 ff       	sbrs	r24, 4
 38c:	0e c0       	rjmp	.+28     	; 0x3aa <__vector_4+0x1a2>
		
		// switch to automatic mode
		if (PINC & (1 << PC4)) {
 38e:	34 9b       	sbis	0x06, 4	; 6
 390:	06 c0       	rjmp	.+12     	; 0x39e <__vector_4+0x196>
			turnOnLeds(2, 0);
 392:	60 e0       	ldi	r22, 0x00	; 0
 394:	70 e0       	ldi	r23, 0x00	; 0
 396:	82 e0       	ldi	r24, 0x02	; 2
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	b2 de       	rcall	.-668    	; 0x100 <turnOnLeds>
 39c:	09 c1       	rjmp	.+530    	; 0x5b0 <__stack+0xb1>
			
		// switch to manual mode
		} else {
			turnOnLeds(0, 0);
 39e:	60 e0       	ldi	r22, 0x00	; 0
 3a0:	70 e0       	ldi	r23, 0x00	; 0
 3a2:	80 e0       	ldi	r24, 0x00	; 0
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	ac de       	rcall	.-680    	; 0x100 <turnOnLeds>
 3a8:	03 c1       	rjmp	.+518    	; 0x5b0 <__stack+0xb1>
		}
		
	// see if IR detected
	} else if (~PINC & (1 << PC5)) {
 3aa:	35 99       	sbic	0x06, 5	; 6
 3ac:	01 c1       	rjmp	.+514    	; 0x5b0 <__stack+0xb1>
 3ae:	20 91 0f 01 	lds	r18, 0x010F	; 0x80010f <IR_state>
 3b2:	30 91 10 01 	lds	r19, 0x0110	; 0x800110 <IR_state+0x1>
 3b6:	82 e0       	ldi	r24, 0x02	; 2
 3b8:	90 e0       	ldi	r25, 0x00	; 0
					
					// update the state
					IR_state = 0;
					break;
				} else {
					IR_state = 0;
 3ba:	f0 e0       	ldi	r31, 0x00	; 0
 3bc:	e0 e0       	ldi	r30, 0x00	; 0
		
		
		for (int i = 0; i < 2; i++) {
			
			// last button push was up
			if (IR_state == 0) {
 3be:	21 15       	cp	r18, r1
 3c0:	31 05       	cpc	r19, r1
 3c2:	09 f0       	breq	.+2      	; 0x3c6 <__vector_4+0x1be>
 3c4:	7f c0       	rjmp	.+254    	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
				
				// if shades are already not at the bottom
				if (current_height != max_height) {
 3c6:	00 91 02 01 	lds	r16, 0x0102	; 0x800102 <__data_end>
 3ca:	10 91 03 01 	lds	r17, 0x0103	; 0x800103 <__data_end+0x1>
 3ce:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <__data_end+0x2>
 3d2:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <__data_end+0x3>
 3d6:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <max_height>
 3da:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <max_height+0x1>
 3de:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <max_height+0x2>
 3e2:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <max_height+0x3>
 3e6:	04 17       	cp	r16, r20
 3e8:	15 07       	cpc	r17, r21
 3ea:	26 07       	cpc	r18, r22
 3ec:	37 07       	cpc	r19, r23
 3ee:	09 f4       	brne	.+2      	; 0x3f2 <__vector_4+0x1ea>
 3f0:	6d c0       	rjmp	.+218    	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
 3f2:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <IR_state+0x1>
 3f6:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <IR_state>
					
					turnOnLeds(1, 0);
 3fa:	60 e0       	ldi	r22, 0x00	; 0
 3fc:	70 e0       	ldi	r23, 0x00	; 0
 3fe:	81 e0       	ldi	r24, 0x01	; 1
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	7e de       	rcall	.-772    	; 0x100 <turnOnLeds>
					
					//_delay_ms(2000);
					
					turnOnLeds(-1, 0);
 404:	60 e0       	ldi	r22, 0x00	; 0
 406:	70 e0       	ldi	r23, 0x00	; 0
 408:	8f ef       	ldi	r24, 0xFF	; 255
 40a:	9f ef       	ldi	r25, 0xFF	; 255
 40c:	79 de       	rcall	.-782    	; 0x100 <turnOnLeds>
					
					current_height = current_height + 1;
 40e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 412:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 416:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <__data_end+0x2>
 41a:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <__data_end+0x3>
 41e:	01 96       	adiw	r24, 0x01	; 1
 420:	a1 1d       	adc	r26, r1
 422:	b1 1d       	adc	r27, r1
 424:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 428:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 42c:	a0 93 04 01 	sts	0x0104, r26	; 0x800104 <__data_end+0x2>
 430:	b0 93 05 01 	sts	0x0105, r27	; 0x800105 <__data_end+0x3>
					
					// start moving the shades down
					servo(down);
 434:	82 e0       	ldi	r24, 0x02	; 2
 436:	1a de       	rcall	.-972    	; 0x6c <servo>
					
					// wait until the shades reach the bottom
					while (current_height < max_height) {
 438:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <__data_end>
 43c:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <__data_end+0x1>
 440:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <__data_end+0x2>
 444:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <__data_end+0x3>
 448:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <max_height>
 44c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <max_height+0x1>
 450:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <max_height+0x2>
 454:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <max_height+0x3>
 458:	48 17       	cp	r20, r24
 45a:	59 07       	cpc	r21, r25
 45c:	6a 07       	cpc	r22, r26
 45e:	7b 07       	cpc	r23, r27
 460:	40 f5       	brcc	.+80     	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
					// while ((~PINC & (1 << PC5)) && current_height < max_height) {
						current_height = current_height + 1;
 462:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 466:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 46a:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <__data_end+0x2>
 46e:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <__data_end+0x3>
 472:	01 96       	adiw	r24, 0x01	; 1
 474:	a1 1d       	adc	r26, r1
 476:	b1 1d       	adc	r27, r1
 478:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 47c:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 480:	a0 93 04 01 	sts	0x0104, r26	; 0x800104 <__data_end+0x2>
 484:	b0 93 05 01 	sts	0x0105, r27	; 0x800105 <__data_end+0x3>
					
					// start moving the shades down
					servo(down);
					
					// wait until the shades reach the bottom
					while (current_height < max_height) {
 488:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <__data_end>
 48c:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <__data_end+0x1>
 490:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <__data_end+0x2>
 494:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <__data_end+0x3>
 498:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <max_height>
 49c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <max_height+0x1>
 4a0:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <max_height+0x2>
 4a4:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <max_height+0x3>
 4a8:	48 17       	cp	r20, r24
 4aa:	59 07       	cpc	r21, r25
 4ac:	6a 07       	cpc	r22, r26
 4ae:	7b 07       	cpc	r23, r27
 4b0:	c0 f2       	brcs	.-80     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
					// while ((~PINC & (1 << PC5)) && current_height < max_height) {
						current_height = current_height + 1;
					}
					
					// stop the servo
					servo(stop);
 4b2:	80 e0       	ldi	r24, 0x00	; 0
 4b4:	db dd       	rcall	.-1098   	; 0x6c <servo>
					
					// update state
					IR_state = 1;
 4b6:	81 e0       	ldi	r24, 0x01	; 1
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <IR_state+0x1>
 4be:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <IR_state>
					break;
 4c2:	71 c0       	rjmp	.+226    	; 0x5a6 <__stack+0xa7>
					IR_state = 1;
				}
			}
			
			// last button push was down
			if (IR_state == 1) {
 4c4:	21 30       	cpi	r18, 0x01	; 1
 4c6:	31 05       	cpc	r19, r1
 4c8:	09 f0       	breq	.+2      	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
 4ca:	66 c0       	rjmp	.+204    	; 0x598 <__stack+0x99>
				// if shades are not already at the top
				if (current_height != 0) {
 4cc:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <__data_end>
 4d0:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <__data_end+0x1>
 4d4:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <__data_end+0x2>
 4d8:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <__data_end+0x3>
 4dc:	45 2b       	or	r20, r21
 4de:	46 2b       	or	r20, r22
 4e0:	47 2b       	or	r20, r23
 4e2:	09 f4       	brne	.+2      	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
 4e4:	57 c0       	rjmp	.+174    	; 0x594 <__stack+0x95>
 4e6:	81 e0       	ldi	r24, 0x01	; 1
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <IR_state+0x1>
 4ee:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <IR_state>
					
										turnOnLeds(2, 0);
 4f2:	60 e0       	ldi	r22, 0x00	; 0
 4f4:	70 e0       	ldi	r23, 0x00	; 0
 4f6:	82 e0       	ldi	r24, 0x02	; 2
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	02 de       	rcall	.-1020   	; 0x100 <turnOnLeds>
					
					//_delay_ms(2000);
					
					current_height = current_height - 1;
 4fc:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 500:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 504:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <__data_end+0x2>
 508:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <__data_end+0x3>
 50c:	01 97       	sbiw	r24, 0x01	; 1
 50e:	a1 09       	sbc	r26, r1
 510:	b1 09       	sbc	r27, r1
 512:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 516:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 51a:	a0 93 04 01 	sts	0x0104, r26	; 0x800104 <__data_end+0x2>
 51e:	b0 93 05 01 	sts	0x0105, r27	; 0x800105 <__data_end+0x3>
					
					turnOnLeds(-1, 0);
 522:	60 e0       	ldi	r22, 0x00	; 0
 524:	70 e0       	ldi	r23, 0x00	; 0
 526:	8f ef       	ldi	r24, 0xFF	; 255
 528:	9f ef       	ldi	r25, 0xFF	; 255
 52a:	ea dd       	rcall	.-1068   	; 0x100 <turnOnLeds>
					
					// start moving the shades up
					servo(up);
 52c:	81 e0       	ldi	r24, 0x01	; 1
 52e:	9e dd       	rcall	.-1220   	; 0x6c <servo>

					
					// wait until the shades reach the top			
					while (current_height > 0) {
 530:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 534:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 538:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <__data_end+0x2>
 53c:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <__data_end+0x3>
 540:	89 2b       	or	r24, r25
 542:	8a 2b       	or	r24, r26
 544:	8b 2b       	or	r24, r27
 546:	f9 f0       	breq	.+62     	; 0x586 <__stack+0x87>
					// while ((~PINC & (1 << PC5)) && current_height > 0) {
						current_height = current_height - 1;
 548:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 54c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 550:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <__data_end+0x2>
 554:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <__data_end+0x3>
 558:	01 97       	sbiw	r24, 0x01	; 1
 55a:	a1 09       	sbc	r26, r1
 55c:	b1 09       	sbc	r27, r1
 55e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 562:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 566:	a0 93 04 01 	sts	0x0104, r26	; 0x800104 <__data_end+0x2>
 56a:	b0 93 05 01 	sts	0x0105, r27	; 0x800105 <__data_end+0x3>
					// start moving the shades up
					servo(up);

					
					// wait until the shades reach the top			
					while (current_height > 0) {
 56e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 572:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 576:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <__data_end+0x2>
 57a:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <__data_end+0x3>
 57e:	89 2b       	or	r24, r25
 580:	8a 2b       	or	r24, r26
 582:	8b 2b       	or	r24, r27
 584:	09 f7       	brne	.-62     	; 0x548 <__stack+0x49>
					// while ((~PINC & (1 << PC5)) && current_height > 0) {
						current_height = current_height - 1;
					}
					// stop the servo
					servo(stop);
 586:	80 e0       	ldi	r24, 0x00	; 0
 588:	71 dd       	rcall	.-1310   	; 0x6c <servo>
					
					
					// update the state
					IR_state = 0;
 58a:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <IR_state+0x1>
 58e:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <IR_state>
					break;
 592:	09 c0       	rjmp	.+18     	; 0x5a6 <__stack+0xa7>
				} else {
					IR_state = 0;
 594:	2f 2f       	mov	r18, r31
 596:	3e 2f       	mov	r19, r30
 598:	01 97       	sbiw	r24, 0x01	; 1
		
		
		
		
		
		for (int i = 0; i < 2; i++) {
 59a:	09 f0       	breq	.+2      	; 0x59e <__stack+0x9f>
 59c:	10 cf       	rjmp	.-480    	; 0x3be <__vector_4+0x1b6>
 59e:	30 93 10 01 	sts	0x0110, r19	; 0x800110 <IR_state+0x1>
 5a2:	20 93 0f 01 	sts	0x010F, r18	; 0x80010f <IR_state>
		//_delay_ms(4000);
	
		//int x;
		// cli();
		
		turnOnLeds(-1, 0);
 5a6:	60 e0       	ldi	r22, 0x00	; 0
 5a8:	70 e0       	ldi	r23, 0x00	; 0
 5aa:	8f ef       	ldi	r24, 0xFF	; 255
 5ac:	9f ef       	ldi	r25, 0xFF	; 255
 5ae:	a8 dd       	rcall	.-1200   	; 0x100 <turnOnLeds>
		
		// PCMSK1 |= (1 << PCINT13);
		
	}
	
	PCMSK1 |= (1 << PCINT13);
 5b0:	ec e6       	ldi	r30, 0x6C	; 108
 5b2:	f0 e0       	ldi	r31, 0x00	; 0
 5b4:	80 81       	ld	r24, Z
 5b6:	80 62       	ori	r24, 0x20	; 32
 5b8:	80 83       	st	Z, r24
	// PCICR |= (1 << PCIE1); 
	
	
}
 5ba:	ff 91       	pop	r31
 5bc:	ef 91       	pop	r30
 5be:	bf 91       	pop	r27
 5c0:	af 91       	pop	r26
 5c2:	9f 91       	pop	r25
 5c4:	8f 91       	pop	r24
 5c6:	7f 91       	pop	r23
 5c8:	6f 91       	pop	r22
 5ca:	5f 91       	pop	r21
 5cc:	4f 91       	pop	r20
 5ce:	3f 91       	pop	r19
 5d0:	2f 91       	pop	r18
 5d2:	1f 91       	pop	r17
 5d4:	0f 91       	pop	r16
 5d6:	0f 90       	pop	r0
 5d8:	0f be       	out	0x3f, r0	; 63
 5da:	0f 90       	pop	r0
 5dc:	1f 90       	pop	r1
 5de:	18 95       	reti

000005e0 <__vector_11>:
}




ISR(TIMER1_COMPA_vect) {
 5e0:	1f 92       	push	r1
 5e2:	0f 92       	push	r0
 5e4:	0f b6       	in	r0, 0x3f	; 63
 5e6:	0f 92       	push	r0
 5e8:	11 24       	eor	r1, r1
 5ea:	2f 93       	push	r18
 5ec:	3f 93       	push	r19
 5ee:	4f 93       	push	r20
 5f0:	5f 93       	push	r21
 5f2:	6f 93       	push	r22
 5f4:	7f 93       	push	r23
 5f6:	8f 93       	push	r24
 5f8:	9f 93       	push	r25
 5fa:	af 93       	push	r26
 5fc:	bf 93       	push	r27
 5fe:	ef 93       	push	r30
 600:	ff 93       	push	r31
	
	// Keeps track of four seconds passing
	ElapsedFourSeconds++;
 602:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <ElapsedFourSeconds>
 606:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <ElapsedFourSeconds+0x1>
 60a:	01 96       	adiw	r24, 0x01	; 1
	//DDRD |= (1 << DDD0) ; // sets bit DDD0 to 1 within register DDRD (PD0 is now an output)
	//PORTD &= ~(1 << PORTD0); //  turn off PD0 (PD0 is grounded)
	//PORTD = PORTD ^ 0x01;	// Toggle the RGB
	
	// check if 2 minutes (120 seconds) have elapsed
	if (ElapsedFourSeconds == 1) {
 60c:	81 30       	cpi	r24, 0x01	; 1
 60e:	91 05       	cpc	r25, r1
 610:	29 f0       	breq	.+10     	; 0x61c <__vector_11+0x3c>


ISR(TIMER1_COMPA_vect) {
	
	// Keeps track of four seconds passing
	ElapsedFourSeconds++;
 612:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <ElapsedFourSeconds+0x1>
 616:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <ElapsedFourSeconds>
 61a:	64 c0       	rjmp	.+200    	; 0x6e4 <__vector_11+0x104>
	//PORTD = PORTD ^ 0x01;	// Toggle the RGB
	
	// check if 2 minutes (120 seconds) have elapsed
	if (ElapsedFourSeconds == 1) {
		
		ElapsedFourSeconds = 0;  // Reset counter variable
 61c:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <ElapsedFourSeconds+0x1>
 620:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <ElapsedFourSeconds>
		
		// Take a reading of the LDR sensor
		ADCSRA |= 1 << ADSC; // start the first conversion
 624:	ea e7       	ldi	r30, 0x7A	; 122
 626:	f0 e0       	ldi	r31, 0x00	; 0
 628:	80 81       	ld	r24, Z
 62a:	80 64       	ori	r24, 0x40	; 64
 62c:	80 83       	st	Z, r24

		//// we are synchronously waiting for the conversion to complete
		while(ADCSRA & (1<<ADIF));
 62e:	80 81       	ld	r24, Z
 630:	84 fd       	sbrc	r24, 4
 632:	fd cf       	rjmp	.-6      	; 0x62e <__vector_11+0x4e>
		//
		// compare ADC to set value
		if (ADC >= 523) {
 634:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__EEPROM_REGION_LENGTH__+0x7f0078>
 638:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__EEPROM_REGION_LENGTH__+0x7f0079>
 63c:	8b 30       	cpi	r24, 0x0B	; 11
 63e:	92 40       	sbci	r25, 0x02	; 2
 640:	18 f0       	brcs	.+6      	; 0x648 <__vector_11+0x68>
			light_now = yes;
 642:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <light_now>
 646:	03 c0       	rjmp	.+6      	; 0x64e <__vector_11+0x6e>
		} else {
			light_now = no;
 648:	81 e0       	ldi	r24, 0x01	; 1
 64a:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <light_now>
		}

		// figure out number of hits
		if (light_before == light_now) {
 64e:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <light_now>
 652:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
 656:	98 13       	cpse	r25, r24
 658:	0e c0       	rjmp	.+28     	; 0x676 <__vector_11+0x96>
			if (hits < 2) {
 65a:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <hits>
 65e:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <hits+0x1>
 662:	22 30       	cpi	r18, 0x02	; 2
 664:	31 05       	cpc	r19, r1
 666:	58 f4       	brcc	.+22     	; 0x67e <__vector_11+0x9e>
				hits++;
 668:	2f 5f       	subi	r18, 0xFF	; 255
 66a:	3f 4f       	sbci	r19, 0xFF	; 255
 66c:	30 93 0d 01 	sts	0x010D, r19	; 0x80010d <hits+0x1>
 670:	20 93 0c 01 	sts	0x010C, r18	; 0x80010c <hits>
 674:	04 c0       	rjmp	.+8      	; 0x67e <__vector_11+0x9e>
			}
		} else {
			hits = 0;
 676:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <hits+0x1>
 67a:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <hits>
		}
		light_before = light_now;
 67e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		
		// determine state machine output (what should the blinds do next)
		if (current_state == dark AND light_now == yes AND hits == 2) {
 682:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <current_state>
 686:	91 30       	cpi	r25, 0x01	; 1
 688:	81 f4       	brne	.+32     	; 0x6aa <__vector_11+0xca>
 68a:	81 11       	cpse	r24, r1
 68c:	21 c0       	rjmp	.+66     	; 0x6d0 <__vector_11+0xf0>
 68e:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <hits>
 692:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <hits+0x1>
 696:	02 97       	sbiw	r24, 0x02	; 2
 698:	d9 f4       	brne	.+54     	; 0x6d0 <__vector_11+0xf0>
			current_state = light;
 69a:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <current_state>
			turnOnLeds(2, 0);
 69e:	60 e0       	ldi	r22, 0x00	; 0
 6a0:	70 e0       	ldi	r23, 0x00	; 0
 6a2:	82 e0       	ldi	r24, 0x02	; 2
 6a4:	90 e0       	ldi	r25, 0x00	; 0
 6a6:	2c dd       	rcall	.-1448   	; 0x100 <turnOnLeds>
 6a8:	18 c0       	rjmp	.+48     	; 0x6da <__vector_11+0xfa>
			// aleskeyfunction(2);
		} else if (current_state == light AND light_now == no AND hits == 2) {
 6aa:	91 11       	cpse	r25, r1
 6ac:	11 c0       	rjmp	.+34     	; 0x6d0 <__vector_11+0xf0>
 6ae:	81 30       	cpi	r24, 0x01	; 1
 6b0:	79 f4       	brne	.+30     	; 0x6d0 <__vector_11+0xf0>
 6b2:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <hits>
 6b6:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <hits+0x1>
 6ba:	02 97       	sbiw	r24, 0x02	; 2
 6bc:	49 f4       	brne	.+18     	; 0x6d0 <__vector_11+0xf0>
			current_state = dark;
 6be:	81 e0       	ldi	r24, 0x01	; 1
 6c0:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <current_state>
			turnOnLeds(1, 0);
 6c4:	60 e0       	ldi	r22, 0x00	; 0
 6c6:	70 e0       	ldi	r23, 0x00	; 0
 6c8:	81 e0       	ldi	r24, 0x01	; 1
 6ca:	90 e0       	ldi	r25, 0x00	; 0
 6cc:	19 dd       	rcall	.-1486   	; 0x100 <turnOnLeds>
 6ce:	05 c0       	rjmp	.+10     	; 0x6da <__vector_11+0xfa>
			// aleskesyfunction(0);
		} else {
			turnOnLeds(3, 0);
 6d0:	60 e0       	ldi	r22, 0x00	; 0
 6d2:	70 e0       	ldi	r23, 0x00	; 0
 6d4:	83 e0       	ldi	r24, 0x03	; 3
 6d6:	90 e0       	ldi	r25, 0x00	; 0
 6d8:	13 dd       	rcall	.-1498   	; 0x100 <turnOnLeds>
			current_state = current_state;
		}
		
		// Clear ADIF by writing one to it
		// Clearing ADC bit
		ADCSRA|=(1<<ADIF);		
 6da:	ea e7       	ldi	r30, 0x7A	; 122
 6dc:	f0 e0       	ldi	r31, 0x00	; 0
 6de:	80 81       	ld	r24, Z
 6e0:	80 61       	ori	r24, 0x10	; 16
 6e2:	80 83       	st	Z, r24
		
	}
	
}
 6e4:	ff 91       	pop	r31
 6e6:	ef 91       	pop	r30
 6e8:	bf 91       	pop	r27
 6ea:	af 91       	pop	r26
 6ec:	9f 91       	pop	r25
 6ee:	8f 91       	pop	r24
 6f0:	7f 91       	pop	r23
 6f2:	6f 91       	pop	r22
 6f4:	5f 91       	pop	r21
 6f6:	4f 91       	pop	r20
 6f8:	3f 91       	pop	r19
 6fa:	2f 91       	pop	r18
 6fc:	0f 90       	pop	r0
 6fe:	0f be       	out	0x3f, r0	; 63
 700:	0f 90       	pop	r0
 702:	1f 90       	pop	r1
 704:	18 95       	reti

00000706 <_exit>:
 706:	f8 94       	cli

00000708 <__stop_program>:
 708:	ff cf       	rjmp	.-2      	; 0x708 <__stop_program>
