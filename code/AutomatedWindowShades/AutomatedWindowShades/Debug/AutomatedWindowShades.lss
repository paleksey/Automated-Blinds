
AutomatedWindowShades.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000404  00000498  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000404  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  00800102  00800102  0000049a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000049a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000508  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009ea  00000000  00000000  00000548  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006bc  00000000  00000000  00000f32  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004d4  00000000  00000000  000015ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f4  00000000  00000000  00001ac4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000484  00000000  00000000  00001bb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002e1  00000000  00000000  0000203c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  0000231d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	a4 c0       	rjmp	.+328    	; 0x152 <__vector_4>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	61 c1       	rjmp	.+706    	; 0x2da <__vector_11>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	e4 e0       	ldi	r30, 0x04	; 4
  48:	f4 e0       	ldi	r31, 0x04	; 4
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	a2 30       	cpi	r26, 0x02	; 2
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	21 e0       	ldi	r18, 0x01	; 1
  58:	a2 e0       	ldi	r26, 0x02	; 2
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	a3 31       	cpi	r26, 0x13	; 19
  62:	b2 07       	cpc	r27, r18
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	02 d0       	rcall	.+4      	; 0x6c <main>
  68:	cb c1       	rjmp	.+918    	; 0x400 <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <main>:
	    }

		if(action == stop)
		{
			DDRB &= ~(1 << DDB1);
			TCCR1A &= (0<<COM1A1) & (0<<COM1A1);
  6c:	e1 e8       	ldi	r30, 0x81	; 129
  6e:	f0 e0       	ldi	r31, 0x00	; 0
  70:	80 81       	ld	r24, Z
  72:	88 60       	ori	r24, 0x08	; 8
  74:	80 83       	st	Z, r24
  76:	ef e6       	ldi	r30, 0x6F	; 111
  78:	f0 e0       	ldi	r31, 0x00	; 0
  7a:	80 81       	ld	r24, Z
  7c:	82 60       	ori	r24, 0x02	; 2
  7e:	80 83       	st	Z, r24
  80:	ec e7       	ldi	r30, 0x7C	; 124
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	80 81       	ld	r24, Z
  86:	80 64       	ori	r24, 0x40	; 64
  88:	80 83       	st	Z, r24
  8a:	80 81       	ld	r24, Z
  8c:	8f 7d       	andi	r24, 0xDF	; 223
  8e:	80 83       	st	Z, r24
  90:	ea e7       	ldi	r30, 0x7A	; 122
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	87 60       	ori	r24, 0x07	; 7
  98:	80 83       	st	Z, r24
  9a:	80 81       	ld	r24, Z
  9c:	80 68       	ori	r24, 0x80	; 128
  9e:	80 83       	st	Z, r24
  a0:	87 b1       	in	r24, 0x07	; 7
  a2:	87 b9       	out	0x07, r24	; 7
  a4:	88 b1       	in	r24, 0x08	; 8
  a6:	8e 64       	ori	r24, 0x4E	; 78
  a8:	88 b9       	out	0x08, r24	; 8
  aa:	e8 e6       	ldi	r30, 0x68	; 104
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	82 60       	ori	r24, 0x02	; 2
  b2:	80 83       	st	Z, r24
  b4:	ec e6       	ldi	r30, 0x6C	; 108
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	80 81       	ld	r24, Z
  ba:	8e 60       	ori	r24, 0x0E	; 14
  bc:	80 83       	st	Z, r24
  be:	78 94       	sei
  c0:	84 e2       	ldi	r24, 0x24	; 36
  c2:	94 ef       	ldi	r25, 0xF4	; 244
  c4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__EEPROM_REGION_LENGTH__+0x7f0089>
  c8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__EEPROM_REGION_LENGTH__+0x7f0088>
  cc:	8a b1       	in	r24, 0x0a	; 10
  ce:	87 60       	ori	r24, 0x07	; 7
  d0:	8a b9       	out	0x0a, r24	; 10
  d2:	8b b1       	in	r24, 0x0b	; 11
  d4:	87 60       	ori	r24, 0x07	; 7
  d6:	8b b9       	out	0x0b, r24	; 11
  d8:	ff cf       	rjmp	.-2      	; 0xd8 <main+0x6c>

000000da <turnOnLeds>:


void turnOnLeds(int color, int toggle) {

	// red
	if (color == 0) {
  da:	00 97       	sbiw	r24, 0x00	; 0
  dc:	61 f4       	brne	.+24     	; 0xf6 <turnOnLeds+0x1c>
		if (toggle) {
  de:	67 2b       	or	r22, r23
  e0:	29 f0       	breq	.+10     	; 0xec <turnOnLeds+0x12>
			PORTD = PORTD ^ 0x01;	// Toggle the RGB	
  e2:	9b b1       	in	r25, 0x0b	; 11
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	89 27       	eor	r24, r25
  e8:	8b b9       	out	0x0b, r24	; 11
  ea:	08 95       	ret
			//PIND = _BV(PD0);
		}
		else {
			// make LEDs all high to disable them
			PORTD |= (1 << PD2) | (1 << PD1) | (1 << PD0);
  ec:	8b b1       	in	r24, 0x0b	; 11
  ee:	87 60       	ori	r24, 0x07	; 7
  f0:	8b b9       	out	0x0b, r24	; 11
			
			PORTD &= ~(1 << PD0); //  turn on PD1 (PD1 is grounded)	
  f2:	58 98       	cbi	0x0b, 0	; 11
  f4:	08 95       	ret
		}
	// blue
	} else if (color == 1) {
  f6:	81 30       	cpi	r24, 0x01	; 1
  f8:	91 05       	cpc	r25, r1
  fa:	61 f4       	brne	.+24     	; 0x114 <turnOnLeds+0x3a>
		if (toggle) {
  fc:	67 2b       	or	r22, r23
  fe:	29 f0       	breq	.+10     	; 0x10a <turnOnLeds+0x30>
			PORTD = PORTD ^ 0x02;	// Toggle the RGB
 100:	9b b1       	in	r25, 0x0b	; 11
 102:	82 e0       	ldi	r24, 0x02	; 2
 104:	89 27       	eor	r24, r25
 106:	8b b9       	out	0x0b, r24	; 11
 108:	08 95       	ret
		}
		else {
			// make LEDs all high to disable them
			PORTD |= (1 << PD2) | (1 << PD1) | (1 << PD0);
 10a:	8b b1       	in	r24, 0x0b	; 11
 10c:	87 60       	ori	r24, 0x07	; 7
 10e:	8b b9       	out	0x0b, r24	; 11
			
			PORTD &= ~(1 << PD1); //  turn on PD1 (PD1 is grounded)	
 110:	59 98       	cbi	0x0b, 1	; 11
 112:	08 95       	ret
		}
	// green
	} else if (color == 2) {
 114:	82 30       	cpi	r24, 0x02	; 2
 116:	91 05       	cpc	r25, r1
 118:	61 f4       	brne	.+24     	; 0x132 <turnOnLeds+0x58>
		if (toggle) {
 11a:	67 2b       	or	r22, r23
 11c:	29 f0       	breq	.+10     	; 0x128 <turnOnLeds+0x4e>
			PORTD = PORTD ^ 0x04;	// Toggle the RGB	
 11e:	9b b1       	in	r25, 0x0b	; 11
 120:	84 e0       	ldi	r24, 0x04	; 4
 122:	89 27       	eor	r24, r25
 124:	8b b9       	out	0x0b, r24	; 11
 126:	08 95       	ret
		}
		else {
			// make LEDs all high to disable them
			PORTD |= (1 << PD2) | (1 << PD1) | (1 << PD0);
 128:	8b b1       	in	r24, 0x0b	; 11
 12a:	87 60       	ori	r24, 0x07	; 7
 12c:	8b b9       	out	0x0b, r24	; 11
			
			PORTD &= ~(1 << PD2); //  turn on PD1 (PD1 is grounded)	
 12e:	5a 98       	cbi	0x0b, 2	; 11
 130:	08 95       	ret
		}
	// white 
	} else if (color == 3) {
 132:	03 97       	sbiw	r24, 0x03	; 3
 134:	69 f4       	brne	.+26     	; 0x150 <turnOnLeds+0x76>
		if (toggle) {
 136:	67 2b       	or	r22, r23
 138:	29 f0       	breq	.+10     	; 0x144 <turnOnLeds+0x6a>
			PORTD = PORTD ^ 0x07;	// Toggle the RGB
 13a:	9b b1       	in	r25, 0x0b	; 11
 13c:	87 e0       	ldi	r24, 0x07	; 7
 13e:	89 27       	eor	r24, r25
 140:	8b b9       	out	0x0b, r24	; 11
 142:	08 95       	ret
		}
		else {
			// make LEDs all high to disable them
			PORTD |= (1 << PD2) | (1 << PD1) | (1 << PD0);
 144:	8b b1       	in	r24, 0x0b	; 11
 146:	87 60       	ori	r24, 0x07	; 7
 148:	8b b9       	out	0x0b, r24	; 11
			
			PORTD &= ~(1 << PD2);
 14a:	5a 98       	cbi	0x0b, 2	; 11
			PORTD &= ~(1 << PD1);
 14c:	59 98       	cbi	0x0b, 1	; 11
			PORTD &= ~(1 << PD0);
 14e:	58 98       	cbi	0x0b, 0	; 11
 150:	08 95       	ret

00000152 <__vector_4>:
			    
	}
	


ISR(PCINT1_vect) {
 152:	1f 92       	push	r1
 154:	0f 92       	push	r0
 156:	0f b6       	in	r0, 0x3f	; 63
 158:	0f 92       	push	r0
 15a:	11 24       	eor	r1, r1
 15c:	2f 93       	push	r18
 15e:	3f 93       	push	r19
 160:	4f 93       	push	r20
 162:	5f 93       	push	r21
 164:	6f 93       	push	r22
 166:	7f 93       	push	r23
 168:	8f 93       	push	r24
 16a:	9f 93       	push	r25
 16c:	af 93       	push	r26
 16e:	bf 93       	push	r27
 170:	ef 93       	push	r30
 172:	ff 93       	push	r31
	
	
	changedbits = PINC ^ portbhistory;
 174:	86 b1       	in	r24, 0x06	; 6
 176:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
 17a:	89 27       	eor	r24, r25
 17c:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <changedbits>
	portbhistory = PINC;	
 180:	96 b1       	in	r25, 0x06	; 6
 182:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__data_start>

	
	// check if programming button is pressed
	if (~PINC & (1 << PC3)) {
 186:	33 99       	sbic	0x06, 3	; 6
 188:	41 c0       	rjmp	.+130    	; 0x20c <__vector_4+0xba>
		
		turnOnLeds(3, 1);
 18a:	61 e0       	ldi	r22, 0x01	; 1
 18c:	70 e0       	ldi	r23, 0x00	; 0
 18e:	83 e0       	ldi	r24, 0x03	; 3
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	a3 df       	rcall	.-186    	; 0xda <turnOnLeds>
		
		// disable interrupts
		cli();
 194:	f8 94       	cli
		
		// reset the height, we are assuming shades are at the top
		current_height = 0;
 196:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
 19a:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__data_end+0x1>
 19e:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end+0x2>
 1a2:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <__data_end+0x3>
		
		// force the servo to move down
		// servo(down);
		
		// start keeping track of servo position
		while (~PINC & (1 << PC3)) {
 1a6:	33 99       	sbic	0x06, 3	; 6
 1a8:	1a c0       	rjmp	.+52     	; 0x1de <__vector_4+0x8c>
			turnOnLeds(1, 0);
 1aa:	60 e0       	ldi	r22, 0x00	; 0
 1ac:	70 e0       	ldi	r23, 0x00	; 0
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	93 df       	rcall	.-218    	; 0xda <turnOnLeds>
			current_height = current_height + 1;
 1b4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 1b8:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 1bc:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <__data_end+0x2>
 1c0:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <__data_end+0x3>
 1c4:	01 96       	adiw	r24, 0x01	; 1
 1c6:	a1 1d       	adc	r26, r1
 1c8:	b1 1d       	adc	r27, r1
 1ca:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 1ce:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 1d2:	a0 93 04 01 	sts	0x0104, r26	; 0x800104 <__data_end+0x2>
 1d6:	b0 93 05 01 	sts	0x0105, r27	; 0x800105 <__data_end+0x3>
		
		// force the servo to move down
		// servo(down);
		
		// start keeping track of servo position
		while (~PINC & (1 << PC3)) {
 1da:	33 9b       	sbis	0x06, 3	; 6
 1dc:	e6 cf       	rjmp	.-52     	; 0x1aa <__vector_4+0x58>
		
		// stop the servo
		// servo(stop);
		
		// update the max height so now we know where bottom is
		max_height = current_height;
 1de:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 1e2:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 1e6:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <__data_end+0x2>
 1ea:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <__data_end+0x3>
 1ee:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <max_height>
 1f2:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <max_height+0x1>
 1f6:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <max_height+0x2>
 1fa:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <max_height+0x3>
		
		turnOnLeds(0, 0);
 1fe:	60 e0       	ldi	r22, 0x00	; 0
 200:	70 e0       	ldi	r23, 0x00	; 0
 202:	80 e0       	ldi	r24, 0x00	; 0
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	69 df       	rcall	.-302    	; 0xda <turnOnLeds>
		
		// turn the interrupts back on
		sei();
 208:	78 94       	sei
 20a:	56 c0       	rjmp	.+172    	; 0x2b8 <__vector_4+0x166>
		
	// check if up button is pressed
	} else if (~PINC & (1 << PC1)) {
 20c:	31 99       	sbic	0x06, 1	; 6
 20e:	4d c0       	rjmp	.+154    	; 0x2aa <__vector_4+0x158>
		
		turnOnLeds(0, 1);
 210:	61 e0       	ldi	r22, 0x01	; 1
 212:	70 e0       	ldi	r23, 0x00	; 0
 214:	80 e0       	ldi	r24, 0x00	; 0
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	60 df       	rcall	.-320    	; 0xda <turnOnLeds>
		
		// disable interrupts
		cli();
 21a:	f8 94       	cli
		
		// check position of blinds
		if (current_height > 0) {
 21c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 220:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 224:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <__data_end+0x2>
 228:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <__data_end+0x3>
 22c:	89 2b       	or	r24, r25
 22e:	8a 2b       	or	r24, r26
 230:	8b 2b       	or	r24, r27
 232:	c9 f1       	breq	.+114    	; 0x2a6 <__vector_4+0x154>
			
			// start moving the window shades up
			//servo(move_up);
			
			while ((~PINC & (1 << PC1)) && current_height > 0) {
 234:	31 99       	sbic	0x06, 1	; 6
 236:	32 c0       	rjmp	.+100    	; 0x29c <__vector_4+0x14a>
 238:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 23c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 240:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <__data_end+0x2>
 244:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <__data_end+0x3>
 248:	89 2b       	or	r24, r25
 24a:	8a 2b       	or	r24, r26
 24c:	8b 2b       	or	r24, r27
 24e:	31 f1       	breq	.+76     	; 0x29c <__vector_4+0x14a>
				turnOnLeds(1, 0);
 250:	60 e0       	ldi	r22, 0x00	; 0
 252:	70 e0       	ldi	r23, 0x00	; 0
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	40 df       	rcall	.-384    	; 0xda <turnOnLeds>
				current_height = current_height - 1;
 25a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 25e:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 262:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <__data_end+0x2>
 266:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <__data_end+0x3>
 26a:	01 97       	sbiw	r24, 0x01	; 1
 26c:	a1 09       	sbc	r26, r1
 26e:	b1 09       	sbc	r27, r1
 270:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 274:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 278:	a0 93 04 01 	sts	0x0104, r26	; 0x800104 <__data_end+0x2>
 27c:	b0 93 05 01 	sts	0x0105, r27	; 0x800105 <__data_end+0x3>
		if (current_height > 0) {
			
			// start moving the window shades up
			//servo(move_up);
			
			while ((~PINC & (1 << PC1)) && current_height > 0) {
 280:	31 99       	sbic	0x06, 1	; 6
 282:	0c c0       	rjmp	.+24     	; 0x29c <__vector_4+0x14a>
 284:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 288:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 28c:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <__data_end+0x2>
 290:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <__data_end+0x3>
 294:	89 2b       	or	r24, r25
 296:	8a 2b       	or	r24, r26
 298:	8b 2b       	or	r24, r27
 29a:	d1 f6       	brne	.-76     	; 0x250 <__vector_4+0xfe>
			} 
			
			// stop moving the window shades
			// servo(stop);
			
			turnOnLeds(2, 0);
 29c:	60 e0       	ldi	r22, 0x00	; 0
 29e:	70 e0       	ldi	r23, 0x00	; 0
 2a0:	82 e0       	ldi	r24, 0x02	; 2
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	1a df       	rcall	.-460    	; 0xda <turnOnLeds>
			
		}
		
		// enable interrupts
		sei();
 2a6:	78 94       	sei
 2a8:	07 c0       	rjmp	.+14     	; 0x2b8 <__vector_4+0x166>
		
	} else if (changedbits & (1 << PC2)) {
 2aa:	82 ff       	sbrs	r24, 2
 2ac:	05 c0       	rjmp	.+10     	; 0x2b8 <__vector_4+0x166>
		turnOnLeds(2, 1);
 2ae:	61 e0       	ldi	r22, 0x01	; 1
 2b0:	70 e0       	ldi	r23, 0x00	; 0
 2b2:	82 e0       	ldi	r24, 0x02	; 2
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	11 df       	rcall	.-478    	; 0xda <turnOnLeds>
	}
		
	
}
 2b8:	ff 91       	pop	r31
 2ba:	ef 91       	pop	r30
 2bc:	bf 91       	pop	r27
 2be:	af 91       	pop	r26
 2c0:	9f 91       	pop	r25
 2c2:	8f 91       	pop	r24
 2c4:	7f 91       	pop	r23
 2c6:	6f 91       	pop	r22
 2c8:	5f 91       	pop	r21
 2ca:	4f 91       	pop	r20
 2cc:	3f 91       	pop	r19
 2ce:	2f 91       	pop	r18
 2d0:	0f 90       	pop	r0
 2d2:	0f be       	out	0x3f, r0	; 63
 2d4:	0f 90       	pop	r0
 2d6:	1f 90       	pop	r1
 2d8:	18 95       	reti

000002da <__vector_11>:
}




ISR(TIMER1_COMPA_vect) {
 2da:	1f 92       	push	r1
 2dc:	0f 92       	push	r0
 2de:	0f b6       	in	r0, 0x3f	; 63
 2e0:	0f 92       	push	r0
 2e2:	11 24       	eor	r1, r1
 2e4:	2f 93       	push	r18
 2e6:	3f 93       	push	r19
 2e8:	4f 93       	push	r20
 2ea:	5f 93       	push	r21
 2ec:	6f 93       	push	r22
 2ee:	7f 93       	push	r23
 2f0:	8f 93       	push	r24
 2f2:	9f 93       	push	r25
 2f4:	af 93       	push	r26
 2f6:	bf 93       	push	r27
 2f8:	ef 93       	push	r30
 2fa:	ff 93       	push	r31
	
	// Keeps track of four seconds passing
	ElapsedFourSeconds++;
 2fc:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <ElapsedFourSeconds>
 300:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <ElapsedFourSeconds+0x1>
 304:	01 96       	adiw	r24, 0x01	; 1
	//DDRD |= (1 << DDD0) ; // sets bit DDD0 to 1 within register DDRD (PD0 is now an output)
	//PORTD &= ~(1 << PORTD0); //  turn off PD0 (PD0 is grounded)
	//PORTD = PORTD ^ 0x01;	// Toggle the RGB
	
	// check if 2 minutes (120 seconds) have elapsed
	if (ElapsedFourSeconds == 1) {
 306:	81 30       	cpi	r24, 0x01	; 1
 308:	91 05       	cpc	r25, r1
 30a:	29 f0       	breq	.+10     	; 0x316 <__vector_11+0x3c>


ISR(TIMER1_COMPA_vect) {
	
	// Keeps track of four seconds passing
	ElapsedFourSeconds++;
 30c:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <ElapsedFourSeconds+0x1>
 310:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <ElapsedFourSeconds>
 314:	64 c0       	rjmp	.+200    	; 0x3de <__vector_11+0x104>
	//PORTD = PORTD ^ 0x01;	// Toggle the RGB
	
	// check if 2 minutes (120 seconds) have elapsed
	if (ElapsedFourSeconds == 1) {
		
		ElapsedFourSeconds = 0;  // Reset counter variable
 316:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <ElapsedFourSeconds+0x1>
 31a:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <ElapsedFourSeconds>
		
		// Take a reading of the LDR sensor
		ADCSRA |= 1 << ADSC; // start the first conversion
 31e:	ea e7       	ldi	r30, 0x7A	; 122
 320:	f0 e0       	ldi	r31, 0x00	; 0
 322:	80 81       	ld	r24, Z
 324:	80 64       	ori	r24, 0x40	; 64
 326:	80 83       	st	Z, r24

		//// we are synchronously waiting for the conversion to complete
		while(ADCSRA & (1<<ADIF));
 328:	80 81       	ld	r24, Z
 32a:	84 fd       	sbrc	r24, 4
 32c:	fd cf       	rjmp	.-6      	; 0x328 <__vector_11+0x4e>
		//
		// compare ADC to set value
		if (ADC >= 523) {
 32e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__EEPROM_REGION_LENGTH__+0x7f0078>
 332:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__EEPROM_REGION_LENGTH__+0x7f0079>
 336:	8b 30       	cpi	r24, 0x0B	; 11
 338:	92 40       	sbci	r25, 0x02	; 2
 33a:	18 f0       	brcs	.+6      	; 0x342 <__vector_11+0x68>
			light_now = yes;
 33c:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <light_now>
 340:	03 c0       	rjmp	.+6      	; 0x348 <__vector_11+0x6e>
		} else {
			light_now = no;
 342:	81 e0       	ldi	r24, 0x01	; 1
 344:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <light_now>
		}

		// figure out number of hits
		if (light_before == light_now) {
 348:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <light_now>
 34c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <light_before>
 350:	98 13       	cpse	r25, r24
 352:	0e c0       	rjmp	.+28     	; 0x370 <__vector_11+0x96>
			if (hits < 2) {
 354:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <hits>
 358:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <hits+0x1>
 35c:	22 30       	cpi	r18, 0x02	; 2
 35e:	31 05       	cpc	r19, r1
 360:	58 f4       	brcc	.+22     	; 0x378 <__vector_11+0x9e>
				hits++;
 362:	2f 5f       	subi	r18, 0xFF	; 255
 364:	3f 4f       	sbci	r19, 0xFF	; 255
 366:	30 93 0d 01 	sts	0x010D, r19	; 0x80010d <hits+0x1>
 36a:	20 93 0c 01 	sts	0x010C, r18	; 0x80010c <hits>
 36e:	04 c0       	rjmp	.+8      	; 0x378 <__vector_11+0x9e>
			}
		} else {
			hits = 0;
 370:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <hits+0x1>
 374:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <hits>
		}
		light_before = light_now;
 378:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <light_before>
		
		// determine state machine output (what should the blinds do next)
		if (current_state == dark AND light_now == yes AND hits == 2) {
 37c:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <current_state>
 380:	91 30       	cpi	r25, 0x01	; 1
 382:	81 f4       	brne	.+32     	; 0x3a4 <__vector_11+0xca>
 384:	81 11       	cpse	r24, r1
 386:	21 c0       	rjmp	.+66     	; 0x3ca <__vector_11+0xf0>
 388:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <hits>
 38c:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <hits+0x1>
 390:	02 97       	sbiw	r24, 0x02	; 2
 392:	d9 f4       	brne	.+54     	; 0x3ca <__vector_11+0xf0>
			current_state = light;
 394:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <current_state>
			turnOnLeds(2, 0);
 398:	60 e0       	ldi	r22, 0x00	; 0
 39a:	70 e0       	ldi	r23, 0x00	; 0
 39c:	82 e0       	ldi	r24, 0x02	; 2
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	9c de       	rcall	.-712    	; 0xda <turnOnLeds>
 3a2:	18 c0       	rjmp	.+48     	; 0x3d4 <__vector_11+0xfa>
			// aleskeyfunction(2);
		} else if (current_state == light AND light_now == no AND hits == 2) {
 3a4:	91 11       	cpse	r25, r1
 3a6:	11 c0       	rjmp	.+34     	; 0x3ca <__vector_11+0xf0>
 3a8:	81 30       	cpi	r24, 0x01	; 1
 3aa:	79 f4       	brne	.+30     	; 0x3ca <__vector_11+0xf0>
 3ac:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <hits>
 3b0:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <hits+0x1>
 3b4:	02 97       	sbiw	r24, 0x02	; 2
 3b6:	49 f4       	brne	.+18     	; 0x3ca <__vector_11+0xf0>
			current_state = dark;
 3b8:	81 e0       	ldi	r24, 0x01	; 1
 3ba:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <current_state>
			turnOnLeds(1, 0);
 3be:	60 e0       	ldi	r22, 0x00	; 0
 3c0:	70 e0       	ldi	r23, 0x00	; 0
 3c2:	81 e0       	ldi	r24, 0x01	; 1
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	89 de       	rcall	.-750    	; 0xda <turnOnLeds>
 3c8:	05 c0       	rjmp	.+10     	; 0x3d4 <__vector_11+0xfa>
			// aleskesyfunction(0);
		} else {
			turnOnLeds(3, 0);
 3ca:	60 e0       	ldi	r22, 0x00	; 0
 3cc:	70 e0       	ldi	r23, 0x00	; 0
 3ce:	83 e0       	ldi	r24, 0x03	; 3
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	83 de       	rcall	.-762    	; 0xda <turnOnLeds>
			current_state = current_state;
		}
		
		// Clear ADIF by writing one to it
		// Clearing ADC bit
		ADCSRA|=(1<<ADIF);		
 3d4:	ea e7       	ldi	r30, 0x7A	; 122
 3d6:	f0 e0       	ldi	r31, 0x00	; 0
 3d8:	80 81       	ld	r24, Z
 3da:	80 61       	ori	r24, 0x10	; 16
 3dc:	80 83       	st	Z, r24
		
	}
	
}
 3de:	ff 91       	pop	r31
 3e0:	ef 91       	pop	r30
 3e2:	bf 91       	pop	r27
 3e4:	af 91       	pop	r26
 3e6:	9f 91       	pop	r25
 3e8:	8f 91       	pop	r24
 3ea:	7f 91       	pop	r23
 3ec:	6f 91       	pop	r22
 3ee:	5f 91       	pop	r21
 3f0:	4f 91       	pop	r20
 3f2:	3f 91       	pop	r19
 3f4:	2f 91       	pop	r18
 3f6:	0f 90       	pop	r0
 3f8:	0f be       	out	0x3f, r0	; 63
 3fa:	0f 90       	pop	r0
 3fc:	1f 90       	pop	r1
 3fe:	18 95       	reti

00000400 <_exit>:
 400:	f8 94       	cli

00000402 <__stop_program>:
 402:	ff cf       	rjmp	.-2      	; 0x402 <__stop_program>
