
AutomatedWindowShades.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000004be  00000552  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  00800102  00800102  00000554  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000554  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000584  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000005c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000aaa  00000000  00000000  00000600  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000070c  00000000  00000000  000010aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000052a  00000000  00000000  000017b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f4  00000000  00000000  00001ce0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004af  00000000  00000000  00001dd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002ff  00000000  00000000  00002283  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00002582  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	f5 c0       	rjmp	.+490    	; 0x1f4 <__vector_4>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	be c1       	rjmp	.+892    	; 0x394 <__vector_11>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	ee eb       	ldi	r30, 0xBE	; 190
  48:	f4 e0       	ldi	r31, 0x04	; 4
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	a2 30       	cpi	r26, 0x02	; 2
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	21 e0       	ldi	r18, 0x01	; 1
  58:	a2 e0       	ldi	r26, 0x02	; 2
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	a3 31       	cpi	r26, 0x13	; 19
  62:	b2 07       	cpc	r27, r18
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	02 d0       	rcall	.+4      	; 0x6c <main>
  68:	28 c2       	rjmp	.+1104   	; 0x4ba <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <main>:
int main(void)
{
	
	
	// SET UP TIMER INTERRUPTS (FOR POLLING THE LDR)
	TCCR1B |= (1 << WGM12);                                // Configure timer 1 for CTC mode
  6c:	e1 e8       	ldi	r30, 0x81	; 129
  6e:	f0 e0       	ldi	r31, 0x00	; 0
  70:	80 81       	ld	r24, Z
  72:	88 60       	ori	r24, 0x08	; 8
  74:	80 83       	st	Z, r24
	TIMSK1 |= (1 << OCIE1A);                               // Enable CTC interrupt
  76:	ef e6       	ldi	r30, 0x6F	; 111
  78:	f0 e0       	ldi	r31, 0x00	; 0
  7a:	80 81       	ld	r24, Z
  7c:	82 60       	ori	r24, 0x02	; 2
  7e:	80 83       	st	Z, r24
	

	// CONFIGURE THE ADC (FOR READING THE LDR)
		//int ADCval;
	ADMUX |= 1 << REFS0;                                   // Set AVcc as the reference voltage for the ADC
  80:	ec e7       	ldi	r30, 0x7C	; 124
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	80 81       	ld	r24, Z
  86:	80 64       	ori	r24, 0x40	; 64
  88:	80 83       	st	Z, r24
		ADMUX &= ~(1 << ADLAR);		// Clear for 10 bit resolution
  8a:	80 81       	ld	r24, Z
  8c:	8f 7d       	andi	r24, 0xDF	; 223
  8e:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);  // Enable a prescaler
  90:	ea e7       	ldi	r30, 0x7A	; 122
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	87 60       	ori	r24, 0x07	; 7
  98:	80 83       	st	Z, r24
		ADCSRA |= (1 << ADEN);		// Enable the ADC
  9a:	80 81       	ld	r24, Z
  9c:	80 68       	ori	r24, 0x80	; 128
  9e:	80 83       	st	Z, r24
	// ADCSRA = 1 << ADIE                                     // Enable interrupts function in ADC
	//ADCSRA |= (1 << ADEN);                                   // Turn on the ADC feature
	

	// CONFIGURE THE BUTTONS
	DDRC &= ~(1 << PC1) | ~(1 << PC2) | ~(1 << PC3)| ~(1 << PC6);  // make the up button an input (clear bit)
  a0:	87 b1       	in	r24, 0x07	; 7
  a2:	87 b9       	out	0x07, r24	; 7
	PORTC |= (1 << PC1) | (1 << PC2) | (1 << PC3) | (1 << PC6);  // make the up button tied high (set bit)
  a4:	88 b1       	in	r24, 0x08	; 8
  a6:	8e 64       	ori	r24, 0x4E	; 78
  a8:	88 b9       	out	0x08, r24	; 8

	// CONFIGURE THE INTERRUPTS FOR THE BUTTONS
	PCICR |= (1 << PCIE1);                               // Turn on pin interrupts for PD pins
  aa:	e8 e6       	ldi	r30, 0x68	; 104
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	82 60       	ori	r24, 0x02	; 2
  b2:	80 83       	st	Z, r24
	//PCMSK1 |= (1 << PCINT9) | (1 << PCINT11);              // Mask Interrupts for only the pins you need
	PCMSK1 |= (1 << PCINT9) | (1 << PCINT11) | (1 << PCINT10) | (1 << PCINT13); 
  b4:	ec e6       	ldi	r30, 0x6C	; 108
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	80 81       	ld	r24, Z
  ba:	8e 62       	ori	r24, 0x2E	; 46
  bc:	80 83       	st	Z, r24

	// ENABLE GLOBAL INTERRUPTS
	sei(); 
  be:	78 94       	sei


	// FINISH TIMER INTERRUPTS (FOR LDR POLLING)
	OCR1A = 62500;                                         // Set CTC compare value to 1 KHz at 1 MHz AVR clock, with prescaler of 1024
  c0:	84 e2       	ldi	r24, 0x24	; 36
  c2:	94 ef       	ldi	r25, 0xF4	; 244
  c4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__EEPROM_REGION_LENGTH__+0x7f0089>
  c8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__EEPROM_REGION_LENGTH__+0x7f0088>
	// TCCR1B |= ((1 << CS10) | (1 << CS12));                 // Start timer at F_cpu/1024

	
	// set all LEDs as outputs
	DDRD |= (1 << DDD2) | (1 << DDD1) | (1 << DDD0);
  cc:	8a b1       	in	r24, 0x0a	; 10
  ce:	87 60       	ori	r24, 0x07	; 7
  d0:	8a b9       	out	0x0a, r24	; 10
	
	// make LEDs all high to disable them
	PORTD |= (1 << PD2) | (1 << PD1) | (1 << PD0);
  d2:	8b b1       	in	r24, 0x0b	; 11
  d4:	87 60       	ori	r24, 0x07	; 7
  d6:	8b b9       	out	0x0b, r24	; 11
    /* Replace with your application code */
    while (1) 
    {
		//PORTD = PORTD ^ 0x04;	// Toggle the RGB
		//_delay_ms(500);
    }
  d8:	ff cf       	rjmp	.-2      	; 0xd8 <main+0x6c>

000000da <servo>:
		int CALIBRATE_TIMER =  (PERIOD / (20 + 1.5) * 20);
		int UP_TIMER =  (PERIOD / (20 + 1.7) * 20);
		int DOWN_TIMER =  (PERIOD / (20 + 1.3) * 20);
		

	    if(action == callibrate)
  da:	83 30       	cpi	r24, 0x03	; 3
  dc:	a1 f4       	brne	.+40     	; 0x106 <servo+0x2c>
	    {
	        DDRB  |= (1 << DDB1); // set output to PB1
  de:	21 9a       	sbi	0x04, 1	; 4
			  TCCR1A = ((1 << COM1A0) | (1 << COM1A1) | (1 << WGM11)); // Inverting + WGM mode 14 
  e0:	92 ec       	ldi	r25, 0xC2	; 194
  e2:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__EEPROM_REGION_LENGTH__+0x7f0080>
			  TCCR1B = ((1 << WGM12) | (1 << WGM13) | (1 << CS11)); // WGM mode 14 (Fast PWM), and 8x prescaler
  e6:	9a e1       	ldi	r25, 0x1A	; 26
  e8:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__EEPROM_REGION_LENGTH__+0x7f0081>
			  //(16000000 / 8 / 40000 = 50hz)
			  ICR1  = PERIOD;  //set ICR1 to produce 50Hz frequency
  ec:	2f ef       	ldi	r18, 0xFF	; 255
  ee:	3f e7       	ldi	r19, 0x7F	; 127
  f0:	30 93 87 00 	sts	0x0087, r19	; 0x800087 <__EEPROM_REGION_LENGTH__+0x7f0087>
  f4:	20 93 86 00 	sts	0x0086, r18	; 0x800086 <__EEPROM_REGION_LENGTH__+0x7f0086>
			  OCR1A = CALIBRATE_TIMER;   // 42552 * 0.925 most left
  f8:	20 e1       	ldi	r18, 0x10	; 16
  fa:	37 e7       	ldi	r19, 0x77	; 119
  fc:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__EEPROM_REGION_LENGTH__+0x7f0089>
 100:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__EEPROM_REGION_LENGTH__+0x7f0088>
 104:	2c c0       	rjmp	.+88     	; 0x15e <servo+0x84>
	    }
		    
	    if(action == down)
 106:	82 30       	cpi	r24, 0x02	; 2
 108:	a1 f4       	brne	.+40     	; 0x132 <servo+0x58>
	    {
	       DDRB  |= (1 << DDB1); // set output to PB1
 10a:	21 9a       	sbi	0x04, 1	; 4

			  TCCR1A = ((1 << COM1A0) | (1 << COM1A1) | (1 << WGM11)); // Inverting + WGM mode 14 
 10c:	82 ec       	ldi	r24, 0xC2	; 194
 10e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__EEPROM_REGION_LENGTH__+0x7f0080>
			  TCCR1B = ((1 << WGM12) | (1 << WGM13) | (1 << CS11)); // WGM mode 14 (Fast PWM), and 8x prescaler
 112:	8a e1       	ldi	r24, 0x1A	; 26
 114:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__EEPROM_REGION_LENGTH__+0x7f0081>
			  //(16000000 / 8 / 40000 = 50hz)
			  ICR1  = PERIOD;  //set ICR1 to produce 50Hz frequency
 118:	8f ef       	ldi	r24, 0xFF	; 255
 11a:	9f e7       	ldi	r25, 0x7F	; 127
 11c:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__EEPROM_REGION_LENGTH__+0x7f0087>
 120:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__EEPROM_REGION_LENGTH__+0x7f0086>
			  OCR1A = DOWN_TIMER;   // 42552 * 0.925 most left
 124:	8f e2       	ldi	r24, 0x2F	; 47
 126:	98 e7       	ldi	r25, 0x78	; 120
 128:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__EEPROM_REGION_LENGTH__+0x7f0089>
 12c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__EEPROM_REGION_LENGTH__+0x7f0088>
 130:	08 95       	ret
	    }
	    
	    if(action == up)
 132:	81 30       	cpi	r24, 0x01	; 1
 134:	a1 f4       	brne	.+40     	; 0x15e <servo+0x84>
	    {
	      DDRB  |= (1 << DDB1); // set output to PB1
 136:	21 9a       	sbi	0x04, 1	; 4
			  TCCR1A = ((1 << COM1A0) | (1 << COM1A1) | (1 << WGM11)); // Inverting + WGM mode 14 
 138:	82 ec       	ldi	r24, 0xC2	; 194
 13a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__EEPROM_REGION_LENGTH__+0x7f0080>
			  TCCR1B = ((1 << WGM12) | (1 << WGM13) | (1 << CS11)); // WGM mode 14 (Fast PWM), and 8x prescaler
 13e:	8a e1       	ldi	r24, 0x1A	; 26
 140:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__EEPROM_REGION_LENGTH__+0x7f0081>
			  //(16000000 / 8 / 40000 = 50hz)
			  ICR1  = PERIOD;  //set ICR1 to produce 50Hz frequency
 144:	8f ef       	ldi	r24, 0xFF	; 255
 146:	9f e7       	ldi	r25, 0x7F	; 127
 148:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__EEPROM_REGION_LENGTH__+0x7f0087>
 14c:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__EEPROM_REGION_LENGTH__+0x7f0086>
			  OCR1A = UP_TIMER;   // 42552 * 0.935 most left
 150:	88 ef       	ldi	r24, 0xF8	; 248
 152:	95 e7       	ldi	r25, 0x75	; 117
 154:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__EEPROM_REGION_LENGTH__+0x7f0089>
 158:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__EEPROM_REGION_LENGTH__+0x7f0088>
 15c:	08 95       	ret
	    }

		if(action == stop)
 15e:	81 11       	cpse	r24, r1
 160:	05 c0       	rjmp	.+10     	; 0x16c <servo+0x92>
		{
			DDRB &= ~(1 << DDB1);
 162:	21 98       	cbi	0x04, 1	; 4
			TCCR1A &= (0<<COM1A1) & (0<<COM1A1);
 164:	e0 e8       	ldi	r30, 0x80	; 128
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	80 81       	ld	r24, Z
 16a:	10 82       	st	Z, r1
 16c:	08 95       	ret

0000016e <turnOnLeds>:


void turnOnLeds(int color, int toggle) {

	// red
	if (color == 0) {
 16e:	00 97       	sbiw	r24, 0x00	; 0
 170:	61 f4       	brne	.+24     	; 0x18a <turnOnLeds+0x1c>
		if (toggle) {
 172:	67 2b       	or	r22, r23
 174:	29 f0       	breq	.+10     	; 0x180 <turnOnLeds+0x12>
			PORTD = PORTD ^ 0x01;	// Toggle the RGB	
 176:	9b b1       	in	r25, 0x0b	; 11
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	89 27       	eor	r24, r25
 17c:	8b b9       	out	0x0b, r24	; 11
 17e:	08 95       	ret
			//PIND = _BV(PD0);
		}
		else {
			// make LEDs all high to disable them
			PORTD |= (1 << PD2) | (1 << PD1) | (1 << PD0);
 180:	8b b1       	in	r24, 0x0b	; 11
 182:	87 60       	ori	r24, 0x07	; 7
 184:	8b b9       	out	0x0b, r24	; 11
			
			PORTD &= ~(1 << PD0); //  turn on PD1 (PD1 is grounded)	
 186:	58 98       	cbi	0x0b, 0	; 11
 188:	08 95       	ret
		}
	// blue
	} else if (color == 1) {
 18a:	81 30       	cpi	r24, 0x01	; 1
 18c:	91 05       	cpc	r25, r1
 18e:	61 f4       	brne	.+24     	; 0x1a8 <turnOnLeds+0x3a>
		if (toggle) {
 190:	67 2b       	or	r22, r23
 192:	29 f0       	breq	.+10     	; 0x19e <turnOnLeds+0x30>
			PORTD = PORTD ^ 0x02;	// Toggle the RGB
 194:	9b b1       	in	r25, 0x0b	; 11
 196:	82 e0       	ldi	r24, 0x02	; 2
 198:	89 27       	eor	r24, r25
 19a:	8b b9       	out	0x0b, r24	; 11
 19c:	08 95       	ret
		}
		else {
			// make LEDs all high to disable them
			PORTD |= (1 << PD2) | (1 << PD1) | (1 << PD0);
 19e:	8b b1       	in	r24, 0x0b	; 11
 1a0:	87 60       	ori	r24, 0x07	; 7
 1a2:	8b b9       	out	0x0b, r24	; 11
			
			PORTD &= ~(1 << PD1); //  turn on PD1 (PD1 is grounded)	
 1a4:	59 98       	cbi	0x0b, 1	; 11
 1a6:	08 95       	ret
		}
	// green
	} else if (color == 2) {
 1a8:	82 30       	cpi	r24, 0x02	; 2
 1aa:	91 05       	cpc	r25, r1
 1ac:	61 f4       	brne	.+24     	; 0x1c6 <turnOnLeds+0x58>
		if (toggle) {
 1ae:	67 2b       	or	r22, r23
 1b0:	29 f0       	breq	.+10     	; 0x1bc <turnOnLeds+0x4e>
			PORTD = PORTD ^ 0x04;	// Toggle the RGB	
 1b2:	9b b1       	in	r25, 0x0b	; 11
 1b4:	84 e0       	ldi	r24, 0x04	; 4
 1b6:	89 27       	eor	r24, r25
 1b8:	8b b9       	out	0x0b, r24	; 11
 1ba:	08 95       	ret
		}
		else {
			// make LEDs all high to disable them
			PORTD |= (1 << PD2) | (1 << PD1) | (1 << PD0);
 1bc:	8b b1       	in	r24, 0x0b	; 11
 1be:	87 60       	ori	r24, 0x07	; 7
 1c0:	8b b9       	out	0x0b, r24	; 11
			
			PORTD &= ~(1 << PD2); //  turn on PD1 (PD1 is grounded)	
 1c2:	5a 98       	cbi	0x0b, 2	; 11
 1c4:	08 95       	ret
		}
	// white 
	} else if (color == 3) {
 1c6:	83 30       	cpi	r24, 0x03	; 3
 1c8:	91 05       	cpc	r25, r1
 1ca:	71 f4       	brne	.+28     	; 0x1e8 <turnOnLeds+0x7a>
		if (toggle) {
 1cc:	67 2b       	or	r22, r23
 1ce:	29 f0       	breq	.+10     	; 0x1da <turnOnLeds+0x6c>
			PORTD = PORTD ^ 0x07;	// Toggle the RGB
 1d0:	9b b1       	in	r25, 0x0b	; 11
 1d2:	87 e0       	ldi	r24, 0x07	; 7
 1d4:	89 27       	eor	r24, r25
 1d6:	8b b9       	out	0x0b, r24	; 11
 1d8:	08 95       	ret
		}
		else {
			// make LEDs all high to disable them
			PORTD |= (1 << PD2) | (1 << PD1) | (1 << PD0);
 1da:	8b b1       	in	r24, 0x0b	; 11
 1dc:	87 60       	ori	r24, 0x07	; 7
 1de:	8b b9       	out	0x0b, r24	; 11
			
			PORTD &= ~(1 << PD2);
 1e0:	5a 98       	cbi	0x0b, 2	; 11
			PORTD &= ~(1 << PD1);
 1e2:	59 98       	cbi	0x0b, 1	; 11
			PORTD &= ~(1 << PD0);
 1e4:	58 98       	cbi	0x0b, 0	; 11
 1e6:	08 95       	ret
		}
	} else if (color == -1) {
 1e8:	01 96       	adiw	r24, 0x01	; 1
 1ea:	19 f4       	brne	.+6      	; 0x1f2 <turnOnLeds+0x84>
		// turn off LEDs
		PORTD |= (1 << PD2) | (1 << PD1) | (1 << PD0);
 1ec:	8b b1       	in	r24, 0x0b	; 11
 1ee:	87 60       	ori	r24, 0x07	; 7
 1f0:	8b b9       	out	0x0b, r24	; 11
 1f2:	08 95       	ret

000001f4 <__vector_4>:
			    
	}
	


ISR(PCINT1_vect) {
 1f4:	1f 92       	push	r1
 1f6:	0f 92       	push	r0
 1f8:	0f b6       	in	r0, 0x3f	; 63
 1fa:	0f 92       	push	r0
 1fc:	11 24       	eor	r1, r1
 1fe:	2f 93       	push	r18
 200:	3f 93       	push	r19
 202:	4f 93       	push	r20
 204:	5f 93       	push	r21
 206:	6f 93       	push	r22
 208:	7f 93       	push	r23
 20a:	8f 93       	push	r24
 20c:	9f 93       	push	r25
 20e:	af 93       	push	r26
 210:	bf 93       	push	r27
 212:	ef 93       	push	r30
 214:	ff 93       	push	r31
	
	
	changedbits = PINC ^ portbhistory;
 216:	86 b1       	in	r24, 0x06	; 6
 218:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
 21c:	89 27       	eor	r24, r25
 21e:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <changedbits>
	portbhistory = PINC;	
 222:	96 b1       	in	r25, 0x06	; 6
 224:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__data_start>

	
	// check if programming button is pressed
	if (~PINC & (1 << PC3)) {
 228:	33 99       	sbic	0x06, 3	; 6
 22a:	48 c0       	rjmp	.+144    	; 0x2bc <__vector_4+0xc8>
		
		// disable interrupts
		cli();
 22c:	f8 94       	cli
		
		// reset the height, we are assuming shades are at the top
		current_height = 0;
 22e:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
 232:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__data_end+0x1>
 236:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end+0x2>
 23a:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <__data_end+0x3>
		
		// force the servo to move down
		servo(down);
 23e:	82 e0       	ldi	r24, 0x02	; 2
 240:	4c df       	rcall	.-360    	; 0xda <servo>
		
		turnOnLeds(1, 0);
 242:	60 e0       	ldi	r22, 0x00	; 0
 244:	70 e0       	ldi	r23, 0x00	; 0
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	91 df       	rcall	.-222    	; 0x16e <turnOnLeds>
		
		// start keeping track of servo position
		while ((~PINC & (1 << PC3)) && current_height >= 0) {
 24c:	33 99       	sbic	0x06, 3	; 6
 24e:	1d c0       	rjmp	.+58     	; 0x28a <__vector_4+0x96>
 250:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 254:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 258:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <__data_end+0x2>
 25c:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <__data_end+0x3>
			current_height = current_height + 1;
 260:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 264:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 268:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <__data_end+0x2>
 26c:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <__data_end+0x3>
 270:	01 96       	adiw	r24, 0x01	; 1
 272:	a1 1d       	adc	r26, r1
 274:	b1 1d       	adc	r27, r1
 276:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 27a:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 27e:	a0 93 04 01 	sts	0x0104, r26	; 0x800104 <__data_end+0x2>
 282:	b0 93 05 01 	sts	0x0105, r27	; 0x800105 <__data_end+0x3>
		servo(down);
		
		turnOnLeds(1, 0);
		
		// start keeping track of servo position
		while ((~PINC & (1 << PC3)) && current_height >= 0) {
 286:	33 9b       	sbis	0x06, 3	; 6
 288:	e3 cf       	rjmp	.-58     	; 0x250 <__vector_4+0x5c>
			current_height = current_height + 1;
		}
		
		// stop the servo
		servo(stop);
 28a:	80 e0       	ldi	r24, 0x00	; 0
 28c:	26 df       	rcall	.-436    	; 0xda <servo>
		
		// update the max height so now we know where bottom is
		max_height = current_height;
 28e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 292:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 296:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <__data_end+0x2>
 29a:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <__data_end+0x3>
 29e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <max_height>
 2a2:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <max_height+0x1>
 2a6:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <max_height+0x2>
 2aa:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <max_height+0x3>
		
		turnOnLeds(-1, 0);
 2ae:	60 e0       	ldi	r22, 0x00	; 0
 2b0:	70 e0       	ldi	r23, 0x00	; 0
 2b2:	8f ef       	ldi	r24, 0xFF	; 255
 2b4:	9f ef       	ldi	r25, 0xFF	; 255
 2b6:	5b df       	rcall	.-330    	; 0x16e <turnOnLeds>
		
		// turn the interrupts back on
		sei();
 2b8:	78 94       	sei
 2ba:	5b c0       	rjmp	.+182    	; 0x372 <__vector_4+0x17e>
		
	// check if up button is pressed
	} else if (~PINC & (1 << PC1)) {
 2bc:	31 99       	sbic	0x06, 1	; 6
 2be:	28 c0       	rjmp	.+80     	; 0x310 <__vector_4+0x11c>
		
		// disable interrupts
		cli();
 2c0:	f8 94       	cli
		
		// check position of blinds
		//if (current_height > 0) {
			
			// start moving the window shades up
			servo(up);
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	0a df       	rcall	.-492    	; 0xda <servo>
			
			turnOnLeds(1, 0);
 2c6:	60 e0       	ldi	r22, 0x00	; 0
 2c8:	70 e0       	ldi	r23, 0x00	; 0
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	4f df       	rcall	.-354    	; 0x16e <turnOnLeds>
			
			while ((~PINC & (1 << PC1))) {
 2d0:	31 99       	sbic	0x06, 1	; 6
 2d2:	15 c0       	rjmp	.+42     	; 0x2fe <__vector_4+0x10a>
			// while ((~PINC & (1 << PC1)) && current_height > 0) {
				current_height = current_height - 1;
 2d4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 2d8:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 2dc:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <__data_end+0x2>
 2e0:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <__data_end+0x3>
 2e4:	01 97       	sbiw	r24, 0x01	; 1
 2e6:	a1 09       	sbc	r26, r1
 2e8:	b1 09       	sbc	r27, r1
 2ea:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 2ee:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 2f2:	a0 93 04 01 	sts	0x0104, r26	; 0x800104 <__data_end+0x2>
 2f6:	b0 93 05 01 	sts	0x0105, r27	; 0x800105 <__data_end+0x3>
			// start moving the window shades up
			servo(up);
			
			turnOnLeds(1, 0);
			
			while ((~PINC & (1 << PC1))) {
 2fa:	31 9b       	sbis	0x06, 1	; 6
 2fc:	eb cf       	rjmp	.-42     	; 0x2d4 <__vector_4+0xe0>
			// while ((~PINC & (1 << PC1)) && current_height > 0) {
				current_height = current_height - 1;
			} 
			
			// stop moving the window shades
			servo(stop);
 2fe:	80 e0       	ldi	r24, 0x00	; 0
 300:	ec de       	rcall	.-552    	; 0xda <servo>
			
			turnOnLeds(-1, 0);
 302:	60 e0       	ldi	r22, 0x00	; 0
 304:	70 e0       	ldi	r23, 0x00	; 0
 306:	8f ef       	ldi	r24, 0xFF	; 255
 308:	9f ef       	ldi	r25, 0xFF	; 255
 30a:	31 df       	rcall	.-414    	; 0x16e <turnOnLeds>
			
		//}
		
		// enable interrupts
		sei();
 30c:	78 94       	sei
 30e:	31 c0       	rjmp	.+98     	; 0x372 <__vector_4+0x17e>
		
	} else if (~PINC & (1 << PC2)) {
 310:	32 99       	sbic	0x06, 2	; 6
 312:	28 c0       	rjmp	.+80     	; 0x364 <__vector_4+0x170>
		
		// disable interrupts
		cli();
 314:	f8 94       	cli
		
		// check position of blinds
		//if (current_height < max_height) {
			
			// start moving the window shades down
			servo(down);
 316:	82 e0       	ldi	r24, 0x02	; 2
 318:	e0 de       	rcall	.-576    	; 0xda <servo>
			
			turnOnLeds(1, 0);
 31a:	60 e0       	ldi	r22, 0x00	; 0
 31c:	70 e0       	ldi	r23, 0x00	; 0
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	25 df       	rcall	.-438    	; 0x16e <turnOnLeds>
			
			while ((~PINC & (1 << PC2))) {
 324:	32 99       	sbic	0x06, 2	; 6
 326:	15 c0       	rjmp	.+42     	; 0x352 <__vector_4+0x15e>
			// while ((~PINC & (1 << PC2)) && current_height < max_height) {
				
				current_height = current_height + 1;
 328:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 32c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 330:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <__data_end+0x2>
 334:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <__data_end+0x3>
 338:	01 96       	adiw	r24, 0x01	; 1
 33a:	a1 1d       	adc	r26, r1
 33c:	b1 1d       	adc	r27, r1
 33e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 342:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 346:	a0 93 04 01 	sts	0x0104, r26	; 0x800104 <__data_end+0x2>
 34a:	b0 93 05 01 	sts	0x0105, r27	; 0x800105 <__data_end+0x3>
			// start moving the window shades down
			servo(down);
			
			turnOnLeds(1, 0);
			
			while ((~PINC & (1 << PC2))) {
 34e:	32 9b       	sbis	0x06, 2	; 6
 350:	eb cf       	rjmp	.-42     	; 0x328 <__vector_4+0x134>
				
				current_height = current_height + 1;
			} 
			
			// stop moving the window shades
			servo(stop);
 352:	80 e0       	ldi	r24, 0x00	; 0
 354:	c2 de       	rcall	.-636    	; 0xda <servo>
			
		//}
		
		// enable interrupts
		sei();
 356:	78 94       	sei
		
		turnOnLeds(-1, 0);
 358:	60 e0       	ldi	r22, 0x00	; 0
 35a:	70 e0       	ldi	r23, 0x00	; 0
 35c:	8f ef       	ldi	r24, 0xFF	; 255
 35e:	9f ef       	ldi	r25, 0xFF	; 255
 360:	06 df       	rcall	.-500    	; 0x16e <turnOnLeds>
 362:	07 c0       	rjmp	.+14     	; 0x372 <__vector_4+0x17e>
		
	// see if IR detected
	} else if (changedbits & (1<< PC5)) {
 364:	85 ff       	sbrs	r24, 5
 366:	05 c0       	rjmp	.+10     	; 0x372 <__vector_4+0x17e>
	
		int x;
	
		turnOnLeds(3, 1);
 368:	61 e0       	ldi	r22, 0x01	; 1
 36a:	70 e0       	ldi	r23, 0x00	; 0
 36c:	83 e0       	ldi	r24, 0x03	; 3
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	fe de       	rcall	.-516    	; 0x16e <turnOnLeds>
		
	}
		
	
}
 372:	ff 91       	pop	r31
 374:	ef 91       	pop	r30
 376:	bf 91       	pop	r27
 378:	af 91       	pop	r26
 37a:	9f 91       	pop	r25
 37c:	8f 91       	pop	r24
 37e:	7f 91       	pop	r23
 380:	6f 91       	pop	r22
 382:	5f 91       	pop	r21
 384:	4f 91       	pop	r20
 386:	3f 91       	pop	r19
 388:	2f 91       	pop	r18
 38a:	0f 90       	pop	r0
 38c:	0f be       	out	0x3f, r0	; 63
 38e:	0f 90       	pop	r0
 390:	1f 90       	pop	r1
 392:	18 95       	reti

00000394 <__vector_11>:
}




ISR(TIMER1_COMPA_vect) {
 394:	1f 92       	push	r1
 396:	0f 92       	push	r0
 398:	0f b6       	in	r0, 0x3f	; 63
 39a:	0f 92       	push	r0
 39c:	11 24       	eor	r1, r1
 39e:	2f 93       	push	r18
 3a0:	3f 93       	push	r19
 3a2:	4f 93       	push	r20
 3a4:	5f 93       	push	r21
 3a6:	6f 93       	push	r22
 3a8:	7f 93       	push	r23
 3aa:	8f 93       	push	r24
 3ac:	9f 93       	push	r25
 3ae:	af 93       	push	r26
 3b0:	bf 93       	push	r27
 3b2:	ef 93       	push	r30
 3b4:	ff 93       	push	r31
	
	// Keeps track of four seconds passing
	ElapsedFourSeconds++;
 3b6:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <ElapsedFourSeconds>
 3ba:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <ElapsedFourSeconds+0x1>
 3be:	01 96       	adiw	r24, 0x01	; 1
	//DDRD |= (1 << DDD0) ; // sets bit DDD0 to 1 within register DDRD (PD0 is now an output)
	//PORTD &= ~(1 << PORTD0); //  turn off PD0 (PD0 is grounded)
	//PORTD = PORTD ^ 0x01;	// Toggle the RGB
	
	// check if 2 minutes (120 seconds) have elapsed
	if (ElapsedFourSeconds == 1) {
 3c0:	81 30       	cpi	r24, 0x01	; 1
 3c2:	91 05       	cpc	r25, r1
 3c4:	29 f0       	breq	.+10     	; 0x3d0 <__vector_11+0x3c>


ISR(TIMER1_COMPA_vect) {
	
	// Keeps track of four seconds passing
	ElapsedFourSeconds++;
 3c6:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <ElapsedFourSeconds+0x1>
 3ca:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <ElapsedFourSeconds>
 3ce:	64 c0       	rjmp	.+200    	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
	//PORTD = PORTD ^ 0x01;	// Toggle the RGB
	
	// check if 2 minutes (120 seconds) have elapsed
	if (ElapsedFourSeconds == 1) {
		
		ElapsedFourSeconds = 0;  // Reset counter variable
 3d0:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <ElapsedFourSeconds+0x1>
 3d4:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <ElapsedFourSeconds>
		
		// Take a reading of the LDR sensor
		ADCSRA |= 1 << ADSC; // start the first conversion
 3d8:	ea e7       	ldi	r30, 0x7A	; 122
 3da:	f0 e0       	ldi	r31, 0x00	; 0
 3dc:	80 81       	ld	r24, Z
 3de:	80 64       	ori	r24, 0x40	; 64
 3e0:	80 83       	st	Z, r24

		//// we are synchronously waiting for the conversion to complete
		while(ADCSRA & (1<<ADIF));
 3e2:	80 81       	ld	r24, Z
 3e4:	84 fd       	sbrc	r24, 4
 3e6:	fd cf       	rjmp	.-6      	; 0x3e2 <__vector_11+0x4e>
		//
		// compare ADC to set value
		if (ADC >= 523) {
 3e8:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__EEPROM_REGION_LENGTH__+0x7f0078>
 3ec:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__EEPROM_REGION_LENGTH__+0x7f0079>
 3f0:	8b 30       	cpi	r24, 0x0B	; 11
 3f2:	92 40       	sbci	r25, 0x02	; 2
 3f4:	18 f0       	brcs	.+6      	; 0x3fc <__vector_11+0x68>
			light_now = yes;
 3f6:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <light_now>
 3fa:	03 c0       	rjmp	.+6      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
		} else {
			light_now = no;
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <light_now>
		}

		// figure out number of hits
		if (light_before == light_now) {
 402:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <light_now>
 406:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <light_before>
 40a:	98 13       	cpse	r25, r24
 40c:	0e c0       	rjmp	.+28     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
			if (hits < 2) {
 40e:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <hits>
 412:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <hits+0x1>
 416:	22 30       	cpi	r18, 0x02	; 2
 418:	31 05       	cpc	r19, r1
 41a:	58 f4       	brcc	.+22     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
				hits++;
 41c:	2f 5f       	subi	r18, 0xFF	; 255
 41e:	3f 4f       	sbci	r19, 0xFF	; 255
 420:	30 93 0d 01 	sts	0x010D, r19	; 0x80010d <hits+0x1>
 424:	20 93 0c 01 	sts	0x010C, r18	; 0x80010c <hits>
 428:	04 c0       	rjmp	.+8      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
			}
		} else {
			hits = 0;
 42a:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <hits+0x1>
 42e:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <hits>
		}
		light_before = light_now;
 432:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <light_before>
		
		// determine state machine output (what should the blinds do next)
		if (current_state == dark AND light_now == yes AND hits == 2) {
 436:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <current_state>
 43a:	91 30       	cpi	r25, 0x01	; 1
 43c:	81 f4       	brne	.+32     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 43e:	81 11       	cpse	r24, r1
 440:	21 c0       	rjmp	.+66     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
 442:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <hits>
 446:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <hits+0x1>
 44a:	02 97       	sbiw	r24, 0x02	; 2
 44c:	d9 f4       	brne	.+54     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
			current_state = light;
 44e:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <current_state>
			turnOnLeds(2, 0);
 452:	60 e0       	ldi	r22, 0x00	; 0
 454:	70 e0       	ldi	r23, 0x00	; 0
 456:	82 e0       	ldi	r24, 0x02	; 2
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	89 de       	rcall	.-750    	; 0x16e <turnOnLeds>
 45c:	18 c0       	rjmp	.+48     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
			// aleskeyfunction(2);
		} else if (current_state == light AND light_now == no AND hits == 2) {
 45e:	91 11       	cpse	r25, r1
 460:	11 c0       	rjmp	.+34     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
 462:	81 30       	cpi	r24, 0x01	; 1
 464:	79 f4       	brne	.+30     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
 466:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <hits>
 46a:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <hits+0x1>
 46e:	02 97       	sbiw	r24, 0x02	; 2
 470:	49 f4       	brne	.+18     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
			current_state = dark;
 472:	81 e0       	ldi	r24, 0x01	; 1
 474:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <current_state>
			turnOnLeds(1, 0);
 478:	60 e0       	ldi	r22, 0x00	; 0
 47a:	70 e0       	ldi	r23, 0x00	; 0
 47c:	81 e0       	ldi	r24, 0x01	; 1
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	76 de       	rcall	.-788    	; 0x16e <turnOnLeds>
 482:	05 c0       	rjmp	.+10     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
			// aleskesyfunction(0);
		} else {
			turnOnLeds(3, 0);
 484:	60 e0       	ldi	r22, 0x00	; 0
 486:	70 e0       	ldi	r23, 0x00	; 0
 488:	83 e0       	ldi	r24, 0x03	; 3
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	70 de       	rcall	.-800    	; 0x16e <turnOnLeds>
			current_state = current_state;
		}
		
		// Clear ADIF by writing one to it
		// Clearing ADC bit
		ADCSRA|=(1<<ADIF);		
 48e:	ea e7       	ldi	r30, 0x7A	; 122
 490:	f0 e0       	ldi	r31, 0x00	; 0
 492:	80 81       	ld	r24, Z
 494:	80 61       	ori	r24, 0x10	; 16
 496:	80 83       	st	Z, r24
		
	}
	
}
 498:	ff 91       	pop	r31
 49a:	ef 91       	pop	r30
 49c:	bf 91       	pop	r27
 49e:	af 91       	pop	r26
 4a0:	9f 91       	pop	r25
 4a2:	8f 91       	pop	r24
 4a4:	7f 91       	pop	r23
 4a6:	6f 91       	pop	r22
 4a8:	5f 91       	pop	r21
 4aa:	4f 91       	pop	r20
 4ac:	3f 91       	pop	r19
 4ae:	2f 91       	pop	r18
 4b0:	0f 90       	pop	r0
 4b2:	0f be       	out	0x3f, r0	; 63
 4b4:	0f 90       	pop	r0
 4b6:	1f 90       	pop	r1
 4b8:	18 95       	reti

000004ba <_exit>:
 4ba:	f8 94       	cli

000004bc <__stop_program>:
 4bc:	ff cf       	rjmp	.-2      	; 0x4bc <__stop_program>
