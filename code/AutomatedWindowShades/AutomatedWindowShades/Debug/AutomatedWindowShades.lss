
AutomatedWindowShades.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000018c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800100  00800100  00000200  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000230  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000735  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000063d  00000000  00000000  000009c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002c0  00000000  00000000  00001006  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000005c  00000000  00000000  000012c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003ec  00000000  00000000  00001324  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000007d  00000000  00000000  00001710  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  0000178d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	41 c0       	rjmp	.+130    	; 0x9a <__vector_11>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>
  1e:	1a c0       	rjmp	.+52     	; 0x54 <__bad_interrupt>
  20:	19 c0       	rjmp	.+50     	; 0x54 <__bad_interrupt>
  22:	18 c0       	rjmp	.+48     	; 0x54 <__bad_interrupt>
  24:	17 c0       	rjmp	.+46     	; 0x54 <__bad_interrupt>
  26:	16 c0       	rjmp	.+44     	; 0x54 <__bad_interrupt>
  28:	15 c0       	rjmp	.+42     	; 0x54 <__bad_interrupt>
  2a:	14 c0       	rjmp	.+40     	; 0x54 <__bad_interrupt>
  2c:	13 c0       	rjmp	.+38     	; 0x54 <__bad_interrupt>
  2e:	12 c0       	rjmp	.+36     	; 0x54 <__bad_interrupt>
  30:	11 c0       	rjmp	.+34     	; 0x54 <__bad_interrupt>
  32:	10 c0       	rjmp	.+32     	; 0x54 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_clear_bss>:
  40:	21 e0       	ldi	r18, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a7 30       	cpi	r26, 0x07	; 7
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	02 d0       	rcall	.+4      	; 0x56 <main>
  52:	9a c0       	rjmp	.+308    	; 0x188 <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <main>:
int main(void)
{
	
	
	// SET UP TIMER INTERRUPTS (FOR POLLING THE LDR)
	TCCR1B |= (1 << WGM12);                                // Configure timer 1 for CTC mode
  56:	e1 e8       	ldi	r30, 0x81	; 129
  58:	f0 e0       	ldi	r31, 0x00	; 0
  5a:	80 81       	ld	r24, Z
  5c:	88 60       	ori	r24, 0x08	; 8
  5e:	80 83       	st	Z, r24
	TIMSK1 |= (1 << OCIE1A);                               // Enable CTC interrupt
  60:	af e6       	ldi	r26, 0x6F	; 111
  62:	b0 e0       	ldi	r27, 0x00	; 0
  64:	8c 91       	ld	r24, X
  66:	82 60       	ori	r24, 0x02	; 2
  68:	8c 93       	st	X, r24
	
	
	// CONFIGURE THE ADC (FOR READING THE LDR)
	ADMUX |= 1 << REFS0;                                   // Set AVcc as the reference voltage for the ADC
  6a:	ac e7       	ldi	r26, 0x7C	; 124
  6c:	b0 e0       	ldi	r27, 0x00	; 0
  6e:	8c 91       	ld	r24, X
  70:	80 64       	ori	r24, 0x40	; 64
  72:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);  // Enable a prescaler
  74:	aa e7       	ldi	r26, 0x7A	; 122
  76:	b0 e0       	ldi	r27, 0x00	; 0
  78:	8c 91       	ld	r24, X
  7a:	87 60       	ori	r24, 0x07	; 7
  7c:	8c 93       	st	X, r24
	// ADMUX |= 1 << ADLAR;                                   // 8-bit or 10-bit results
	// ADCSRA = 1 << ADIE                                     // Enable interrupts function in ADC
	ADCSRA |= 1 << ADEN;                                   // Turn on the ADC feature
  7e:	8c 91       	ld	r24, X
  80:	80 68       	ori	r24, 0x80	; 128
  82:	8c 93       	st	X, r24
	
	
	// ENABLE GLOBAL INTERRUPTS
	sei();                                                 
  84:	78 94       	sei
	
	
	// FINISH TIMER INTERRUPTS (FOR LDR POLLING)
	OCR1A = 62500;                                         // Set CTC compare value to 1 KHz at 1 MHz AVR clock, with prescaler of 1024
  86:	84 e2       	ldi	r24, 0x24	; 36
  88:	94 ef       	ldi	r25, 0xF4	; 244
  8a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__EEPROM_REGION_LENGTH__+0x7f0089>
  8e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__EEPROM_REGION_LENGTH__+0x7f0088>
	TCCR1B |= ((1 << CS10) | (1 << CS12));                 // Start timer at F_cpu/1024
  92:	80 81       	ld	r24, Z
  94:	85 60       	ori	r24, 0x05	; 5
  96:	80 83       	st	Z, r24
	
    /* Replace with your application code */
    while (1) 
    {
    }
  98:	ff cf       	rjmp	.-2      	; 0x98 <main+0x42>

0000009a <__vector_11>:
	
}


ISR(TIMER1_COMPA_vect) {
  9a:	1f 92       	push	r1
  9c:	0f 92       	push	r0
  9e:	0f b6       	in	r0, 0x3f	; 63
  a0:	0f 92       	push	r0
  a2:	11 24       	eor	r1, r1
  a4:	2f 93       	push	r18
  a6:	3f 93       	push	r19
  a8:	8f 93       	push	r24
  aa:	9f 93       	push	r25
  ac:	ef 93       	push	r30
  ae:	ff 93       	push	r31
	
	// Keeps track of four seconds passing
	ElapsedFourSeconds++;
  b0:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <ElapsedFourSeconds>
  b4:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <ElapsedFourSeconds+0x1>
  b8:	01 96       	adiw	r24, 0x01	; 1
	
	// check if 2 minutes (120 seconds) have elapsed
	if (ElapsedFourSeconds == 30) {
  ba:	8e 31       	cpi	r24, 0x1E	; 30
  bc:	91 05       	cpc	r25, r1
  be:	29 f0       	breq	.+10     	; 0xca <__vector_11+0x30>


ISR(TIMER1_COMPA_vect) {
	
	// Keeps track of four seconds passing
	ElapsedFourSeconds++;
  c0:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <ElapsedFourSeconds+0x1>
  c4:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <ElapsedFourSeconds>
  c8:	54 c0       	rjmp	.+168    	; 0x172 <__vector_11+0xd8>
	
	// check if 2 minutes (120 seconds) have elapsed
	if (ElapsedFourSeconds == 30) {
		
		ElapsedFourSeconds = 0;  // Reset counter variable
  ca:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <ElapsedFourSeconds+0x1>
  ce:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <ElapsedFourSeconds>
		
		// take a reading of the LDR sensor
		ADCSRA |= 1 << ADSC; // start the first conversion
  d2:	ea e7       	ldi	r30, 0x7A	; 122
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	80 64       	ori	r24, 0x40	; 64
  da:	80 83       	st	Z, r24
		
		// we are synchronously waiting for the conversion to complete
		while(!(ADCSRA & (1<<ADIF)));
  dc:	80 81       	ld	r24, Z
  de:	84 ff       	sbrs	r24, 4
  e0:	fd cf       	rjmp	.-6      	; 0xdc <__vector_11+0x42>
		
		// compare ADC to set value
		if (ADC >= 523) {
  e2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__EEPROM_REGION_LENGTH__+0x7f0078>
  e6:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__EEPROM_REGION_LENGTH__+0x7f0079>
  ea:	8b 30       	cpi	r24, 0x0B	; 11
  ec:	92 40       	sbci	r25, 0x02	; 2
  ee:	18 f0       	brcs	.+6      	; 0xf6 <__vector_11+0x5c>
			light_now = yes;
  f0:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <light_now>
  f4:	03 c0       	rjmp	.+6      	; 0xfc <__vector_11+0x62>
		} else {
			light_now = no;
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <light_now>
		}
		
		// figure out number of hits
		if (light_before == light_now) {
  fc:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <light_now>
 100:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <light_before>
 104:	98 13       	cpse	r25, r24
 106:	0e c0       	rjmp	.+28     	; 0x124 <__vector_11+0x8a>
			if (hits < 5) {
 108:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
 10c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <_edata+0x1>
 110:	25 30       	cpi	r18, 0x05	; 5
 112:	31 05       	cpc	r19, r1
 114:	58 f4       	brcc	.+22     	; 0x12c <__vector_11+0x92>
				hits++;
 116:	2f 5f       	subi	r18, 0xFF	; 255
 118:	3f 4f       	sbci	r19, 0xFF	; 255
 11a:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <_edata+0x1>
 11e:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <_edata>
 122:	04 c0       	rjmp	.+8      	; 0x12c <__vector_11+0x92>
			}
		} else {
			hits = 0;
 124:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 128:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
		}
		light_before = light_now;
 12c:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <light_before>
		
		// determine state machine output (what should the blinds do next)
		if (current_state == dark AND light_now == yes AND hits == 5) {
 130:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <current_state>
 134:	91 30       	cpi	r25, 0x01	; 1
 136:	59 f4       	brne	.+22     	; 0x14e <__vector_11+0xb4>
 138:	81 11       	cpse	r24, r1
 13a:	16 c0       	rjmp	.+44     	; 0x168 <__vector_11+0xce>
 13c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 140:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 144:	05 97       	sbiw	r24, 0x05	; 5
 146:	81 f4       	brne	.+32     	; 0x168 <__vector_11+0xce>
			current_state = light;
 148:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <current_state>
 14c:	0d c0       	rjmp	.+26     	; 0x168 <__vector_11+0xce>
			// openBlinds();
		} else if (current_state == light AND light_now == no AND hits == 5) {
 14e:	91 11       	cpse	r25, r1
 150:	0b c0       	rjmp	.+22     	; 0x168 <__vector_11+0xce>
 152:	81 30       	cpi	r24, 0x01	; 1
 154:	49 f4       	brne	.+18     	; 0x168 <__vector_11+0xce>
 156:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 15a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 15e:	05 97       	sbiw	r24, 0x05	; 5
 160:	19 f4       	brne	.+6      	; 0x168 <__vector_11+0xce>
			current_state = dark;
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <current_state>
		} else {
			current_state = current_state;
		}
		
		// Clear ADIF by writing one to it
		ADCSRA|=(1<<ADIF);
 168:	ea e7       	ldi	r30, 0x7A	; 122
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	80 81       	ld	r24, Z
 16e:	80 61       	ori	r24, 0x10	; 16
 170:	80 83       	st	Z, r24
		
	}
	
}
 172:	ff 91       	pop	r31
 174:	ef 91       	pop	r30
 176:	9f 91       	pop	r25
 178:	8f 91       	pop	r24
 17a:	3f 91       	pop	r19
 17c:	2f 91       	pop	r18
 17e:	0f 90       	pop	r0
 180:	0f be       	out	0x3f, r0	; 63
 182:	0f 90       	pop	r0
 184:	1f 90       	pop	r1
 186:	18 95       	reti

00000188 <_exit>:
 188:	f8 94       	cli

0000018a <__stop_program>:
 18a:	ff cf       	rjmp	.-2      	; 0x18a <__stop_program>
